

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Wed May 23 16:41:44 2018

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F685
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text523,local,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	text524,local,class=CODE,delta=2
    13                           	psect	text525,local,class=CODE,delta=2
    14                           	psect	text526,local,class=CODE,delta=2
    15                           	psect	text527,local,class=CODE,delta=2
    16                           	psect	text528,local,class=CODE,delta=2
    17                           	psect	text529,local,class=CODE,delta=2
    18                           	psect	text530,local,class=CODE,delta=2
    19                           	psect	text531,local,class=CODE,delta=2
    20                           	psect	text532,local,class=CODE,delta=2
    21                           	psect	text533,local,class=CODE,delta=2
    22                           	psect	text534,local,class=CODE,delta=2
    23                           	psect	text535,local,class=CODE,delta=2
    24                           	psect	text536,local,class=CODE,delta=2
    25                           	psect	text537,local,class=CODE,delta=2
    26                           	psect	text538,local,class=CODE,delta=2
    27                           	psect	text539,local,class=CODE,delta=2
    28                           	psect	text540,local,class=CODE,delta=2
    29                           	psect	text541,local,class=CODE,delta=2
    30                           	psect	text542,local,class=CODE,delta=2
    31                           	psect	text543,local,class=CODE,delta=2
    32                           	psect	text544,local,class=CODE,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text545,local,class=CODE,delta=2
    35                           	psect	text546,local,class=CODE,delta=2
    36                           	psect	text547,local,class=CODE,delta=2
    37                           	psect	text548,local,class=CODE,delta=2
    38                           	psect	pa_nodes,global,class=CODE,delta=2
    39                           	dabs	1,0x19D,1
    40                           	dabs	1,0x19E,1
    41                           	dabs	1,0x19E,1
    42                           	dabs	1,0x19E,1
    43                           	dabs	1,0x18C,1
    44                           	dabs	1,0x19E,1
    45                           	dabs	1,0x19E,1
    46                           	dabs	1,0x19E,1
    47                           	dabs	1,0x19E,1
    48                           	dabs	1,0x19D,1
    49                           	dabs	1,0x19D,1
    50                           	dabs	1,0x19D,1
    51                           	dabs	1,0x19D,1
    52                           	dabs	1,0x19D,1
    53                           	dabs	1,0x18C,1
    54                           	dabs	1,0x7E,2
    55  000A                     
    56                           	psect	text523
    57  0000                     __ptext523:	
    58  019D                     _PSTRCON	set	413	;_PSTRCON
    59  019E                     _SRCON	set	414	;_SRCON
    60  0CF5                     _C1SEN	set	3317	;_C1SEN
    61  0CF4                     _C2REN	set	3316	;_C2REN
    62  0C67                     _EEPGD	set	3175	;_EEPGD
    63  0CF2                     _PULSR	set	3314	;_PULSR
    64  0CF3                     _PULSS	set	3315	;_PULSS
    65  0CF6                     _SR0	set	3318	;_SR0
    66  0CF7                     _SR1	set	3319	;_SR1
    67  0CE8                     _STRA	set	3304	;_STRA
    68  0CE9                     _STRB	set	3305	;_STRB
    69  0CEA                     _STRC	set	3306	;_STRC
    70  0CEB                     _STRD	set	3307	;_STRD
    71  0CEC                     _STRSYNC	set	3308	;_STRSYNC
    72  0C62                     _WREN	set	3170	;_WREN
    73  001F                     _ADCON0	set	31
    74  001E                     _ADRESH	set	30
    75  0015                     _CCP1CON	set	21
    76  0014                     _CCPR1H	set	20
    77  0013                     _CCPR1L	set	19
    78  000F                     _TMR1H	set	15
    79  000E                     _TMR1L	set	14
    80  0011                     _TMR2	set	17
    81  0018                     _WDTCON	set	24
    82  00FF                     _ADFM	set	255
    83  00F8                     _ADON	set	248
    84  0068                     _CCP1IF	set	104
    85  00FA                     _CHS0	set	250
    86  00FB                     _CHS1	set	251
    87  00FC                     _CHS2	set	252
    88  00C8                     _CM0	set	200
    89  00C9                     _CM1	set	201
    90  00CA                     _CM2	set	202
    91  0067                     _EEIF	set	103
    92  005F                     _GIE	set	95
    93  00F9                     _GO_DONE	set	249
    94  0039                     _PC1	set	57
    95  003A                     _PC2	set	58
    96  003B                     _PC3	set	59
    97  005E                     _PEIE	set	94
    98  0084                     _T1CKPS0	set	132
    99  0085                     _T1CKPS1	set	133
   100  0083                     _T1OSCEN	set	131
   101  0090                     _T2CKPS0	set	144
   102  0091                     _T2CKPS1	set	145
   103  0081                     _TMR1CS	set	129
   104  0080                     _TMR1ON	set	128
   105  0061                     _TMR2IF	set	97
   106  0092                     _TMR2ON	set	146
   107  0093                     _TOUTPS0	set	147
   108  0094                     _TOUTPS1	set	148
   109  0095                     _TOUTPS2	set	149
   110  0096                     _TOUTPS3	set	150
   111  00FD                     _VCFG0	set	253
   112  009E                     _ADRESL	set	158
   113  009B                     _EEADR	set	155
   114  009C                     _EECON1	set	156
   115  009A                     _EEDAT	set	154
   116  0081                     _OPTION	set	129
   117  008F                     _OSCCON	set	143
   118  0092                     _PR2	set	146
   119  04FC                     _ADCS0	set	1276
   120  04FD                     _ADCS1	set	1277
   121  04FE                     _ADCS2	set	1278
   122  0488                     _ANSEL0	set	1160
   123  0489                     _ANSEL1	set	1161
   124  048A                     _ANSEL2	set	1162
   125  048B                     _ANSEL3	set	1163
   126  048C                     _ANSEL4	set	1164
   127  048D                     _ANSEL5	set	1165
   128  048E                     _ANSEL6	set	1166
   129  048F                     _ANSEL7	set	1167
   130  0468                     _CCP1IE	set	1128
   131  04FF                     _DIVS	set	1279
   132  04E0                     _RD	set	1248
   133  0461                     _TMR2IE	set	1121
   134  0428                     _TRISA0	set	1064
   135  0429                     _TRISA1	set	1065
   136  042A                     _TRISA2	set	1066
   137  042B                     _TRISA3	set	1067
   138  042C                     _TRISA4	set	1068
   139  042D                     _TRISA5	set	1069
   140  042E                     _TRISA6	set	1070
   141  042F                     _TRISA7	set	1071
   142  0438                     _TRISC0	set	1080
   143  0439                     _TRISC1	set	1081
   144  043A                     _TRISC2	set	1082
   145  043B                     _TRISC3	set	1083
   146  043C                     _TRISC4	set	1084
   147  043D                     _TRISC5	set	1085
   148  044C                     _WPDA4	set	1100
   149  044B                     _WPDC1	set	1099
   150  044A                     _WPDC2	set	1098
   151  0449                     _WPDC3	set	1097
   152  04A8                     _WPUA0	set	1192
   153  04A9                     _WPUA1	set	1193
   154  04AA                     _WPUA2	set	1194
   155  04AB                     _WPUA3	set	1195
   156  04AC                     _WPUA4	set	1196
   157  04AD                     _WPUA5	set	1197
   158  04AE                     _WPUA6	set	1198
   159  04AF                     _WPUA7	set	1199
   160  0440                     _WPUC0	set	1088
   161  0441                     _WPUC1	set	1089
   162  0442                     _WPUC2	set	1090
   163  0443                     _WPUC3	set	1091
   164  0444                     _WPUC4	set	1092
   165  0445                     _WPUC5	set	1093
   166  04E8                     _WR	set	1256
   167                           
   168                           	psect	cinit
   169  02DC                     start_initialization:	
   170                           
   171                           ; Clear objects allocated to COMMON
   172  02DC  3077               	movlw	low __pbssCOMMON
   173  02DD  0084               	movwf	4
   174  02DE  307C               	movlw	low (__pbssCOMMON+5)
   175  02DF  22F0               	fcall	clear_ram
   176  02E0  3032               	movlw	low __pbssBANK0
   177                           
   178                           ; Clear objects allocated to BANK0
   179  02E1  1383               	bcf	3,7	;select IRP bank0
   180  02E2  0084               	movwf	4
   181  02E3  3042               	movlw	low (__pbssBANK0+16)
   182  02E4  22F0               	fcall	clear_ram
   183  02E5                     end_of_initialization:	
   184                           ;End of C runtime variable initialization code
   185                           
   186  02E5  0183               	clrf	3
   187  02E6  29D9               	ljmp	_main	;jump to C main() function
   188                           
   189                           	psect	bssCOMMON
   190  0077                     __pbssCOMMON:	
   191  0077                     _num:	
   192  0077                     	ds	2
   193  0079                     _VS1838_Receive_Count:	
   194  0079                     	ds	1
   195  007A                     _VS1838_Status:	
   196  007A                     	ds	1
   197  007B                     _send_flag:	
   198  007B                     	ds	1
   199                           
   200                           	psect	bssBANK0
   201  0032                     __pbssBANK0:	
   202  0032                     _IR_DATA_t:	
   203  0032                     	ds	4
   204  0036                     _VS838_Receive_Data:	
   205  0036                     	ds	4
   206  003A                     _ADC_GET:	
   207  003A                     	ds	2
   208  003C                     _Cycle_CCPR:	
   209  003C                     	ds	2
   210  003E                     _count:	
   211  003E                     	ds	2
   212  0040                     _VS1838_receive_ok:	
   213  0040                     	ds	1
   214  0041                     _flag_senf:	
   215  0041                     	ds	1
   216                           
   217                           	psect	clrtext
   218  02F0                     clear_ram:	
   219                           ;	Called with FSR containing the base address, and
   220                           ;	W with the last address+1
   221                           
   222  02F0  0064               	clrwdt	;clear the watchdog before getting into this loop
   223  02F1                     clrloop:	
   224  02F1  0180               	clrf	0	;clear RAM location pointed to by FSR
   225  02F2  0A84               	incf	4,f	;increment pointer
   226  02F3  0604               	xorwf	4,w	;XOR with final address
   227  02F4  1903               	btfsc	3,2	;have we reached the end yet?
   228  02F5  3400               	retlw	0	;all done for this memory range, return
   229  02F6  0604               	xorwf	4,w	;XOR again to restore value
   230  02F7  2AF1               	goto	clrloop	;do the next byte
   231                           
   232                           	psect	cstackCOMMON
   233  0070                     __pcstackCOMMON:	
   234  0070                     ?_System_init:	
   235  0070                     ?_GPIO_Init:	
   236                           ; 0 bytes @ 0x0
   237                           
   238  0070                     ?_Timer1_Init:	
   239                           ; 0 bytes @ 0x0
   240                           
   241  0070                     ?_Timer2_Init:	
   242                           ; 0 bytes @ 0x0
   243                           
   244  0070                     ?_ADC_Init:	
   245                           ; 0 bytes @ 0x0
   246                           
   247  0070                     ?_EEPROM_Init:	
   248                           ; 0 bytes @ 0x0
   249                           
   250  0070                     ?_LED_Study_End:	
   251                           ; 0 bytes @ 0x0
   252                           
   253  0070                     ?_Control:	
   254                           ; 0 bytes @ 0x0
   255                           
   256  0070                     ?_Clean_countReg:	
   257                           ; 0 bytes @ 0x0
   258                           
   259  0070                     ??_Clean_countReg:	
   260                           ; 0 bytes @ 0x0
   261                           
   262  0070                     ?_main:	
   263                           ; 0 bytes @ 0x0
   264                           
   265  0070                     ?_VS1838ReceiveHandle:	
   266                           ; 0 bytes @ 0x0
   267                           
   268  0070                     ?_ISR:	
   269                           ; 0 bytes @ 0x0
   270                           
   271  0070                     ?_isKeyPressed:	
   272                           ; 0 bytes @ 0x0
   273                           
   274  0070                     ?_VS1838_Process:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_Read_EEPROM_u8:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_GetCCP1Value:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     VS1838ReceiveHandle@capdata:	
   284                           ; 2 bytes @ 0x0
   285                           
   286                           
   287                           ; 2 bytes @ 0x0
   288  0070                     	ds	2
   289  0072                     ??_GetCCP1Value:	
   290  0072                     ??_VS1838ReceiveHandle:	
   291                           ; 0 bytes @ 0x2
   292                           
   293  0072                     GetCCP1Value@values:	
   294                           ; 0 bytes @ 0x2
   295                           
   296                           
   297                           ; 2 bytes @ 0x2
   298  0072                     	ds	2
   299  0074                     ??_ISR:	
   300                           
   301                           ; 0 bytes @ 0x4
   302  0074                     	ds	3
   303                           
   304                           	psect	cstackBANK0
   305  0020                     __pcstackBANK0:	
   306  0020                     ??_System_init:	
   307  0020                     ??_GPIO_Init:	
   308                           ; 0 bytes @ 0x0
   309                           
   310  0020                     ??_Timer1_Init:	
   311                           ; 0 bytes @ 0x0
   312                           
   313  0020                     ??_Timer2_Init:	
   314                           ; 0 bytes @ 0x0
   315                           
   316  0020                     ??_isKeyPressed:	
   317                           ; 0 bytes @ 0x0
   318                           
   319  0020                     ?_Delay_xms:	
   320                           ; 0 bytes @ 0x0
   321                           
   322  0020                     ?_Write_EEPROM_u8:	
   323                           ; 0 bytes @ 0x0
   324                           
   325  0020                     ??_Read_EEPROM_u8:	
   326                           ; 0 bytes @ 0x0
   327                           
   328  0020                     ?_Delay_xus:	
   329                           ; 0 bytes @ 0x0
   330                           
   331  0020                     ?_GetADCValue:	
   332                           ; 0 bytes @ 0x0
   333                           
   334  0020                     ?___lwdiv:	
   335                           ; 2 bytes @ 0x0
   336                           
   337  0020                     Write_EEPROM_u8@EEDatas:	
   338                           ; 2 bytes @ 0x0
   339                           
   340  0020                     Read_EEPROM_u8@EEAddress:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0020                     Delay_xms@x:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0020                     Delay_xus@x:	
   347                           ; 2 bytes @ 0x0
   348                           
   349  0020                     ___lwdiv@divisor:	
   350                           ; 2 bytes @ 0x0
   351                           
   352                           
   353                           ; 2 bytes @ 0x0
   354  0020                     	ds	1
   355  0021                     ??_Write_EEPROM_u8:	
   356  0021                     Write_EEPROM_u8@EEAddress:	
   357                           ; 0 bytes @ 0x1
   358                           
   359  0021                     Read_EEPROM_u8@EepromData:	
   360                           ; 1 bytes @ 0x1
   361                           
   362                           
   363                           ; 1 bytes @ 0x1
   364  0021                     	ds	1
   365  0022                     ??_EEPROM_Init:	
   366  0022                     ??_VS1838_Process:	
   367                           ; 0 bytes @ 0x2
   368                           
   369  0022                     ??_GetADCValue:	
   370                           ; 0 bytes @ 0x2
   371                           
   372  0022                     ??_Delay_xms:	
   373                           ; 0 bytes @ 0x2
   374                           
   375  0022                     ??_Delay_xus:	
   376                           ; 0 bytes @ 0x2
   377                           
   378  0022                     ?_Read_IRData:	
   379                           ; 0 bytes @ 0x2
   380                           
   381  0022                     VS1838_Process@Address_H:	
   382                           ; 4 bytes @ 0x2
   383                           
   384  0022                     GetADCValue@ADC_num:	
   385                           ; 1 bytes @ 0x2
   386                           
   387  0022                     Delay_xus@i:	
   388                           ; 2 bytes @ 0x2
   389                           
   390  0022                     ___lwdiv@dividend:	
   391                           ; 2 bytes @ 0x2
   392                           
   393                           
   394                           ; 2 bytes @ 0x2
   395  0022                     	ds	1
   396  0023                     VS1838_Process@Address_L:	
   397                           
   398                           ; 1 bytes @ 0x3
   399  0023                     	ds	1
   400  0024                     ?_Send_Low:	
   401  0024                     ??___lwdiv:	
   402                           ; 0 bytes @ 0x4
   403                           
   404  0024                     VS1838_Process@Data_H:	
   405                           ; 0 bytes @ 0x4
   406                           
   407  0024                     Delay_xms@i:	
   408                           ; 1 bytes @ 0x4
   409                           
   410  0024                     Send_Low@nus:	
   411                           ; 2 bytes @ 0x4
   412                           
   413  0024                     ___lwdiv@quotient:	
   414                           ; 2 bytes @ 0x4
   415                           
   416                           
   417                           ; 2 bytes @ 0x4
   418  0024                     	ds	1
   419  0025                     VS1838_Process@Data_L:	
   420                           
   421                           ; 1 bytes @ 0x5
   422  0025                     	ds	1
   423  0026                     ??_ADC_Init:	
   424  0026                     ??_LED_Study_End:	
   425                           ; 0 bytes @ 0x6
   426                           
   427  0026                     ??_Read_IRData:	
   428                           ; 0 bytes @ 0x6
   429                           
   430  0026                     ??_Send_Low:	
   431                           ; 0 bytes @ 0x6
   432                           
   433  0026                     ___lwdiv@counter:	
   434                           ; 0 bytes @ 0x6
   435                           
   436                           
   437                           ; 1 bytes @ 0x6
   438  0026                     	ds	1
   439  0027                     ?_Send_High:	
   440  0027                     Send_High@nus:	
   441                           ; 0 bytes @ 0x7
   442                           
   443                           
   444                           ; 2 bytes @ 0x7
   445  0027                     	ds	2
   446  0029                     ?_IR_SEND:	
   447  0029                     ??_Send_High:	
   448                           ; 0 bytes @ 0x9
   449                           
   450  0029                     IR_SEND@irdata:	
   451                           ; 0 bytes @ 0x9
   452                           
   453                           
   454                           ; 4 bytes @ 0x9
   455  0029                     	ds	1
   456  002A                     Read_IRData@Address_H:	
   457                           
   458                           ; 1 bytes @ 0xA
   459  002A                     	ds	1
   460  002B                     Read_IRData@Address_L:	
   461                           
   462                           ; 1 bytes @ 0xB
   463  002B                     	ds	1
   464  002C                     Read_IRData@Data_H:	
   465                           
   466                           ; 1 bytes @ 0xC
   467  002C                     	ds	1
   468  002D                     ??_IR_SEND:	
   469  002D                     Read_IRData@Data_L:	
   470                           ; 0 bytes @ 0xD
   471                           
   472  002D                     IR_SEND@i:	
   473                           ; 1 bytes @ 0xD
   474                           
   475                           
   476                           ; 1 bytes @ 0xD
   477  002D                     	ds	1
   478  002E                     ??_Control:	
   479  002E                     Control@i:	
   480                           ; 0 bytes @ 0xE
   481                           
   482  002E                     Read_IRData@data_t:	
   483                           ; 1 bytes @ 0xE
   484                           
   485                           
   486                           ; 4 bytes @ 0xE
   487  002E                     	ds	4
   488  0032                     ??_main:	
   489                           
   490                           	psect	maintext
   491  01D9                     __pmaintext:	
   492                           ; 0 bytes @ 0x12
   493 ;;Data sizes: Strings 0, constant 0, data 0, bss 21, persistent 0 stack 0
   494 ;;Auto spaces:   Size  Autos    Used
   495 ;; COMMON          14      7      12
   496 ;; BANK0           80     18      34
   497 ;; BANK1           32      0       0
   498 ;;
   499 ;; Pointer list with targets:
   500 ;; ?_GetCCP1Value	unsigned int  size(1) Largest target is 0
   501 ;;
   502 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
   503 ;;
   504 ;; ?_Read_IRData	unsigned long  size(1) Largest target is 0
   505 ;;
   506 ;; ?_GetADCValue	unsigned int  size(1) Largest target is 0
   507 ;;
   508 ;;
   509 ;; Critical Paths under _main in COMMON
   510 ;;
   511 ;;   None.
   512 ;;
   513 ;; Critical Paths under _ISR in COMMON
   514 ;;
   515 ;;   _ISR->_GetCCP1Value
   516 ;;
   517 ;; Critical Paths under _main in BANK0
   518 ;;
   519 ;;   _main->_Read_IRData
   520 ;;   _Control->_IR_SEND
   521 ;;   _IR_SEND->_Send_High
   522 ;;   _Send_Low->_Delay_xus
   523 ;;   _LED_Study_End->_Delay_xms
   524 ;;   _ADC_Init->_Delay_xms
   525 ;;   _Send_High->___lwdiv
   526 ;;   _VS1838_Process->_Write_EEPROM_u8
   527 ;;   _Read_IRData->_Read_EEPROM_u8
   528 ;;   _EEPROM_Init->_Write_EEPROM_u8
   529 ;;
   530 ;; Critical Paths under _ISR in BANK0
   531 ;;
   532 ;;   None.
   533 ;;
   534 ;; Critical Paths under _main in BANK1
   535 ;;
   536 ;;   None.
   537 ;;
   538 ;; Critical Paths under _ISR in BANK1
   539 ;;
   540 ;;   None.
   541 ;;
   542 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   543 ;;
   544 ;;
   545 ;;Call Graph Tables:
   546 ;;
   547 ;; ---------------------------------------------------------------------------------
   548 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   549 ;; ---------------------------------------------------------------------------------
   550 ;; (0) _main                                                 0     0      0     964
   551 ;;                        _System_init
   552 ;;                          _GPIO_Init
   553 ;;                        _Timer1_Init
   554 ;;                        _Timer2_Init
   555 ;;                           _ADC_Init
   556 ;;                        _EEPROM_Init
   557 ;;                      _LED_Study_End
   558 ;;                        _Read_IRData
   559 ;;                            _Control
   560 ;; ---------------------------------------------------------------------------------
   561 ;; (1) _Control                                              1     1      0     665
   562 ;;                                             14 BANK0      1     1      0
   563 ;;                       _isKeyPressed
   564 ;;                     _VS1838_Process
   565 ;;                        _GetADCValue
   566 ;;                            _IR_SEND
   567 ;;                          _Delay_xms
   568 ;; ---------------------------------------------------------------------------------
   569 ;; (2) _IR_SEND                                              5     1      4     322
   570 ;;                                              9 BANK0      5     1      4
   571 ;;                          _Send_High
   572 ;;                           _Send_Low
   573 ;; ---------------------------------------------------------------------------------
   574 ;; (3) _Send_Low                                             2     0      2      68
   575 ;;                                              4 BANK0      2     0      2
   576 ;;                          _Delay_xus
   577 ;; ---------------------------------------------------------------------------------
   578 ;; (1) _LED_Study_End                                        0     0      0      46
   579 ;;                          _Delay_xms
   580 ;; ---------------------------------------------------------------------------------
   581 ;; (1) _ADC_Init                                             0     0      0      46
   582 ;;                          _Delay_xms
   583 ;; ---------------------------------------------------------------------------------
   584 ;; (3) _Send_High                                            2     0      2     184
   585 ;;                                              7 BANK0      2     0      2
   586 ;;                            ___lwdiv
   587 ;; ---------------------------------------------------------------------------------
   588 ;; (4) _Delay_xus                                            4     2      2      46
   589 ;;                                              0 BANK0      4     2      2
   590 ;; ---------------------------------------------------------------------------------
   591 ;; (2) _Delay_xms                                            6     4      2      46
   592 ;;                                              0 BANK0      6     4      2
   593 ;; ---------------------------------------------------------------------------------
   594 ;; (2) _VS1838_Process                                       4     4      0     224
   595 ;;                                              2 BANK0      4     4      0
   596 ;;                    _Write_EEPROM_u8
   597 ;; ---------------------------------------------------------------------------------
   598 ;; (1) _Read_IRData                                         16    12      4     163
   599 ;;                                              2 BANK0     16    12      4
   600 ;;                     _Read_EEPROM_u8
   601 ;; ---------------------------------------------------------------------------------
   602 ;; (1) _EEPROM_Init                                          0     0      0      44
   603 ;;                    _Write_EEPROM_u8
   604 ;; ---------------------------------------------------------------------------------
   605 ;; (4) ___lwdiv                                              7     3      4     162
   606 ;;                                              0 BANK0      7     3      4
   607 ;; ---------------------------------------------------------------------------------
   608 ;; (2) _Read_EEPROM_u8                                       2     2      0      46
   609 ;;                                              0 BANK0      2     2      0
   610 ;; ---------------------------------------------------------------------------------
   611 ;; (3) _Write_EEPROM_u8                                      2     1      1      44
   612 ;;                                              0 BANK0      2     1      1
   613 ;; ---------------------------------------------------------------------------------
   614 ;; (2) _GetADCValue                                          4     2      2      26
   615 ;;                                              0 BANK0      4     2      2
   616 ;; ---------------------------------------------------------------------------------
   617 ;; (2) _isKeyPressed                                         0     0      0       0
   618 ;; ---------------------------------------------------------------------------------
   619 ;; (1) _Timer2_Init                                          0     0      0       0
   620 ;; ---------------------------------------------------------------------------------
   621 ;; (1) _Timer1_Init                                          0     0      0       0
   622 ;; ---------------------------------------------------------------------------------
   623 ;; (1) _GPIO_Init                                            0     0      0       0
   624 ;; ---------------------------------------------------------------------------------
   625 ;; (1) _System_init                                          0     0      0       0
   626 ;; ---------------------------------------------------------------------------------
   627 ;; Estimated maximum stack depth 4
   628 ;; ---------------------------------------------------------------------------------
   629 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   630 ;; ---------------------------------------------------------------------------------
   631 ;; (5) _ISR                                                  3     3      0     158
   632 ;;                                              4 COMMON     3     3      0
   633 ;;                       _GetCCP1Value
   634 ;;                _VS1838ReceiveHandle
   635 ;;                     _Clean_countReg
   636 ;; ---------------------------------------------------------------------------------
   637 ;; (6) _Clean_countReg                                       0     0      0       0
   638 ;; ---------------------------------------------------------------------------------
   639 ;; (6) _GetCCP1Value                                         4     2      2      26
   640 ;;                                              0 COMMON     4     2      2
   641 ;; ---------------------------------------------------------------------------------
   642 ;; (6) _VS1838ReceiveHandle                                  2     0      2     132
   643 ;;                                              0 COMMON     2     0      2
   644 ;; ---------------------------------------------------------------------------------
   645 ;; Estimated maximum stack depth 6
   646 ;; ---------------------------------------------------------------------------------
   647 ;; Call Graph Graphs:
   648 ;; _main (ROOT)
   649 ;;   _System_init
   650 ;;   _GPIO_Init
   651 ;;   _Timer1_Init
   652 ;;   _Timer2_Init
   653 ;;   _ADC_Init
   654 ;;     _Delay_xms
   655 ;;   _EEPROM_Init
   656 ;;     _Write_EEPROM_u8
   657 ;;   _LED_Study_End
   658 ;;     _Delay_xms
   659 ;;   _Read_IRData
   660 ;;     _Read_EEPROM_u8
   661 ;;   _Control
   662 ;;     _isKeyPressed
   663 ;;     _VS1838_Process
   664 ;;       _Write_EEPROM_u8
   665 ;;     _GetADCValue
   666 ;;     _IR_SEND
   667 ;;       _Send_High
   668 ;;         ___lwdiv
   669 ;;       _Send_Low
   670 ;;         _Delay_xus
   671 ;;     _Delay_xms
   672 ;;
   673 ;; _ISR (ROOT)
   674 ;;   _GetCCP1Value
   675 ;;   _VS1838ReceiveHandle
   676 ;;   _Clean_countReg
   677 ;;
   678 ;; Address spaces:
   679 ;;Name               Size   Autos  Total    Cost      Usage
   680 ;;BITCOMMON            E      0       0       0        0.0%
   681 ;;EEDATA             100      0       0       0        0.0%
   682 ;;NULL                 0      0       0       0        0.0%
   683 ;;CODE                 0      0       0       0        0.0%
   684 ;;COMMON               E      7       C       1       85.7%
   685 ;;BITSFR0              0      0       0       1        0.0%
   686 ;;SFR0                 0      0       0       1        0.0%
   687 ;;BITSFR1              0      0       0       2        0.0%
   688 ;;SFR1                 0      0       0       2        0.0%
   689 ;;STACK                0      0       8       2        0.0%
   690 ;;BITBANK0            50      0       0       3        0.0%
   691 ;;BANK0               50     12      22       4       42.5%
   692 ;;BITBANK1            20      0       0       5        0.0%
   693 ;;BITSFR2              0      0       0       5        0.0%
   694 ;;SFR2                 0      0       0       5        0.0%
   695 ;;BANK1               20      0       0       6        0.0%
   696 ;;ABS                  0      0      2E       7        0.0%
   697 ;;DATA                 0      0      36       8        0.0%
   698                           
   699                           
   700 ;; *************** function _main *****************
   701 ;; Defined at:
   702 ;;		line 44 in file "main.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;		None
   707 ;; Return value:  Size  Location     Type
   708 ;;		None               void
   709 ;; Registers used:
   710 ;;		wreg, status,2, status,0, pclath, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 17F/0
   713 ;;		On exit  : 60/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMMON   BANK0   BANK1
   716 ;;      Params:         0       0       0
   717 ;;      Locals:         0       0       0
   718 ;;      Temps:          0       0       0
   719 ;;      Totals:         0       0       0
   720 ;;Total ram usage:        0 bytes
   721 ;; Hardware stack levels required when called:    6
   722 ;; This function calls:
   723 ;;		_System_init
   724 ;;		_GPIO_Init
   725 ;;		_Timer1_Init
   726 ;;		_Timer2_Init
   727 ;;		_ADC_Init
   728 ;;		_EEPROM_Init
   729 ;;		_LED_Study_End
   730 ;;		_Read_IRData
   731 ;;		_Control
   732 ;; This function is called by:
   733 ;;		Startup code after reset
   734 ;; This function uses a non-reentrant model
   735 ;;
   736  01D9                     _main:	
   737                           
   738                           ;main.c: 45: System_init();
   739                           
   740                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   741  01D9  22F8               	fcall	_System_init
   742                           
   743                           ;main.c: 46: GPIO_Init();
   744  01DA  2180               	fcall	_GPIO_Init
   745                           
   746                           ;main.c: 47: Timer1_Init();
   747  01DB  227A               	fcall	_Timer1_Init
   748                           
   749                           ;main.c: 48: Timer2_Init();
   750  01DC  22B3               	fcall	_Timer2_Init
   751                           
   752                           ;main.c: 49: ADC_Init();
   753  01DD  2264               	fcall	_ADC_Init
   754                           
   755                           ;main.c: 51: EEPROM_Init();
   756  01DE  22E7               	fcall	_EEPROM_Init
   757                           
   758                           ;main.c: 52: LED_Study_End();
   759  01DF  221A               	fcall	_LED_Study_End
   760                           
   761                           ;main.c: 53: PC2 = 0;
   762  01E0  1107               	bcf	7,2
   763                           
   764                           ;main.c: 54: IR_DATA_t = Read_IRData();
   765  01E1  2118               	fcall	_Read_IRData
   766  01E2  0825               	movf	?_Read_IRData+3,w
   767  01E3  00B5               	movwf	_IR_DATA_t+3
   768  01E4  0824               	movf	?_Read_IRData+2,w
   769  01E5  00B4               	movwf	_IR_DATA_t+2
   770  01E6  0823               	movf	?_Read_IRData+1,w
   771  01E7  00B3               	movwf	_IR_DATA_t+1
   772  01E8  0822               	movf	?_Read_IRData,w
   773  01E9  00B2               	movwf	_IR_DATA_t
   774                           
   775                           ;main.c: 55: if(IR_DATA_t == 0xFFFFFFFF)
   776  01EA  0A32               	incf	_IR_DATA_t,w
   777  01EB  1903               	skipnz
   778  01EC  0A33               	incf	_IR_DATA_t+1,w
   779  01ED  1903               	skipnz
   780  01EE  0A34               	incf	_IR_DATA_t+2,w
   781  01EF  1903               	skipnz
   782  01F0  0A35               	incf	_IR_DATA_t+3,w
   783  01F1  1D03               	skipz
   784  01F2  29FB               	goto	l10534
   785                           
   786                           ;main.c: 56: IR_DATA_t = 0x00FF906F;
   787  01F3  3000               	movlw	0
   788  01F4  00B5               	movwf	_IR_DATA_t+3
   789  01F5  30FF               	movlw	255
   790  01F6  00B4               	movwf	_IR_DATA_t+2
   791  01F7  3090               	movlw	144
   792  01F8  00B3               	movwf	_IR_DATA_t+1
   793  01F9  306F               	movlw	111
   794  01FA  00B2               	movwf	_IR_DATA_t
   795  01FB                     l10534:	
   796                           
   797                           ;main.c: 59: {
   798                           ;main.c: 60: Control();
   799  01FB  20AB               	fcall	_Control
   800  01FC  29FB               	goto	l10534
   801  01FD                     __end_of_main:	
   802                           
   803                           	psect	text524
   804  00AB                     __ptext524:	
   805 ;; =============== function _main ends ============
   806                           
   807                           
   808 ;; *************** function _Control *****************
   809 ;; Defined at:
   810 ;;		line 73 in file "main.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;		None
   813 ;; Auto vars:     Size  Location     Type
   814 ;;  i               1   14[BANK0 ] unsigned char 
   815 ;; Return value:  Size  Location     Type
   816 ;;		None               void
   817 ;; Registers used:
   818 ;;		wreg, status,2, status,0, pclath, cstack
   819 ;; Tracked objects:
   820 ;;		On entry : 60/0
   821 ;;		On exit  : 60/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMMON   BANK0   BANK1
   824 ;;      Params:         0       0       0
   825 ;;      Locals:         0       1       0
   826 ;;      Temps:          0       0       0
   827 ;;      Totals:         0       1       0
   828 ;;Total ram usage:        1 bytes
   829 ;; Hardware stack levels used:    1
   830 ;; Hardware stack levels required when called:    5
   831 ;; This function calls:
   832 ;;		_isKeyPressed
   833 ;;		_VS1838_Process
   834 ;;		_GetADCValue
   835 ;;		_IR_SEND
   836 ;;		_Delay_xms
   837 ;; This function is called by:
   838 ;;		_main
   839 ;; This function uses a non-reentrant model
   840 ;;
   841  00AB                     _Control:	
   842                           
   843                           ;main.c: 76: if(isKeyPressed()){
   844                           
   845                           ; Regs used in _Control: [wreg+status,2+status,0+pclath+cstack]
   846  00AB  2300               	fcall	_isKeyPressed
   847  00AC  3A00               	xorlw	0
   848  00AD  1903               	skipnz
   849  00AE  28BF               	goto	l10494
   850                           
   851                           ;main.c: 77: TMR1ON=1;
   852  00AF  1410               	bsf	16,0
   853                           
   854                           ;main.c: 78: VS1838_Status=0;
   855  00B0  01FA               	clrf	_VS1838_Status
   856                           
   857                           ;main.c: 79: VS838_Receive_Data=0;
   858  00B1  01B6               	clrf	_VS838_Receive_Data
   859  00B2  01B7               	clrf	_VS838_Receive_Data+1
   860  00B3  01B8               	clrf	_VS838_Receive_Data+2
   861  00B4  01B9               	clrf	_VS838_Receive_Data+3
   862                           
   863                           ;main.c: 80: VS1838_receive_ok=0;
   864  00B5  01C0               	clrf	_VS1838_receive_ok
   865  00B6                     l10492:	
   866                           ;main.c: 81: while(!VS1838_Process()){
   867                           
   868  00B6  20E2               	fcall	_VS1838_Process
   869  00B7  3A00               	xorlw	0
   870  00B8  1D03               	btfss	3,2
   871  00B9  28BC               	goto	l1113
   872                           
   873                           ;main.c: 82: PC3=1;
   874  00BA  1587               	bsf	7,3
   875  00BB  28B6               	goto	l10492
   876  00BC                     l1113:	
   877                           
   878                           ;main.c: 83: }
   879                           ;main.c: 84: TMR1ON=0;
   880  00BC  1010               	bcf	16,0
   881                           
   882                           ;main.c: 85: PC3=0;
   883  00BD  1187               	bcf	7,3
   884                           
   885                           ;main.c: 86: }else{
   886  00BE  0008               	return
   887  00BF                     l10494:	
   888                           
   889                           ;main.c: 87: for(i=0;i<5;i++)
   890  00BF  01AE               	clrf	Control@i
   891  00C0                     l10500:	
   892                           
   893                           ;main.c: 88: ADC_GET = GetADCValue();
   894  00C0  228E               	fcall	_GetADCValue
   895  00C1  0821               	movf	?_GetADCValue+1,w
   896  00C2  00BB               	movwf	_ADC_GET+1
   897  00C3  0820               	movf	?_GetADCValue,w
   898  00C4  00BA               	movwf	_ADC_GET
   899  00C5  3005               	movlw	5
   900  00C6  0AAE               	incf	Control@i,f
   901  00C7  022E               	subwf	Control@i,w
   902  00C8  1C03               	skipc
   903  00C9  28C0               	goto	l10500
   904                           
   905                           ;main.c: 89: if(ADC_GET >= 512){
   906  00CA  3002               	movlw	2
   907  00CB  023B               	subwf	_ADC_GET+1,w
   908  00CC  3000               	movlw	0
   909  00CD  1903               	skipnz
   910  00CE  023A               	subwf	_ADC_GET,w
   911  00CF  1C03               	skipc
   912  00D0  28DE               	goto	l10510
   913                           
   914                           ;main.c: 90: IR_SEND(IR_DATA_t);
   915  00D1  0835               	movf	_IR_DATA_t+3,w
   916  00D2  00AC               	movwf	?_IR_SEND+3
   917  00D3  0834               	movf	_IR_DATA_t+2,w
   918  00D4  00AB               	movwf	?_IR_SEND+2
   919  00D5  0833               	movf	_IR_DATA_t+1,w
   920  00D6  00AA               	movwf	?_IR_SEND+1
   921  00D7  0832               	movf	_IR_DATA_t,w
   922  00D8  00A9               	movwf	?_IR_SEND
   923  00D9  214E               	fcall	_IR_SEND
   924                           
   925                           ;main.c: 91: Delay_xms(100);
   926  00DA  3064               	movlw	100
   927  00DB  00A0               	movwf	?_Delay_xms
   928  00DC  01A1               	clrf	?_Delay_xms+1
   929  00DD  2A34               	ljmp	l10396
   930  00DE                     l10510:	
   931                           ;main.c: 92: }else{
   932                           
   933                           
   934                           ;main.c: 93: Delay_xms(20);
   935  00DE  3014               	movlw	20
   936  00DF  00A0               	movwf	?_Delay_xms
   937  00E0  01A1               	clrf	?_Delay_xms+1
   938  00E1  2A34               	ljmp	l10396
   939  00E2                     __end_of_Control:	
   940                           
   941                           	psect	text525
   942  014E                     __ptext525:	
   943 ;; =============== function _Control ends ============
   944                           
   945                           
   946 ;; *************** function _IR_SEND *****************
   947 ;; Defined at:
   948 ;;		line 156 in file "MyIR.c"
   949 ;; Parameters:    Size  Location     Type
   950 ;;  irdata          4    9[BANK0 ] unsigned long 
   951 ;; Auto vars:     Size  Location     Type
   952 ;;  i               1   13[BANK0 ] unsigned char 
   953 ;; Return value:  Size  Location     Type
   954 ;;		None               void
   955 ;; Registers used:
   956 ;;		wreg, status,2, status,0, pclath, cstack
   957 ;; Tracked objects:
   958 ;;		On entry : 60/0
   959 ;;		On exit  : 60/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMMON   BANK0   BANK1
   962 ;;      Params:         0       4       0
   963 ;;      Locals:         0       1       0
   964 ;;      Temps:          0       0       0
   965 ;;      Totals:         0       5       0
   966 ;;Total ram usage:        5 bytes
   967 ;; Hardware stack levels used:    1
   968 ;; Hardware stack levels required when called:    4
   969 ;; This function calls:
   970 ;;		_Send_High
   971 ;;		_Send_Low
   972 ;; This function is called by:
   973 ;;		_Control
   974 ;; This function uses a non-reentrant model
   975 ;;
   976  014E                     _IR_SEND:	
   977                           
   978                           ;MyIR.c: 159: Send_High(8300);
   979                           
   980                           ; Regs used in _IR_SEND: [wreg+status,2+status,0+pclath+cstack]
   981  014E  306C               	movlw	108
   982  014F  00A7               	movwf	?_Send_High
   983  0150  3020               	movlw	32
   984  0151  00A8               	movwf	?_Send_High+1
   985  0152  224D               	fcall	_Send_High
   986                           
   987                           ;MyIR.c: 160: Send_Low(900);
   988  0153  3084               	movlw	132
   989  0154  00A4               	movwf	?_Send_Low
   990  0155  3003               	movlw	3
   991  0156  00A5               	movwf	?_Send_Low+1
   992  0157  2307               	fcall	_Send_Low
   993                           
   994                           ;MyIR.c: 161: for(i=0;i<32;i++){
   995  0158  01AD               	clrf	IR_SEND@i
   996  0159                     l5491:	
   997                           
   998                           ;MyIR.c: 162: if(irdata & 0x80000000){
   999  0159  1FAC               	btfss	IR_SEND@irdata+3,7
  1000  015A  2965               	goto	l10472
  1001                           
  1002                           ;MyIR.c: 163: Send_High(560);
  1003  015B  3030               	movlw	48
  1004  015C  00A7               	movwf	?_Send_High
  1005  015D  3002               	movlw	2
  1006  015E  00A8               	movwf	?_Send_High+1
  1007  015F  224D               	fcall	_Send_High
  1008                           
  1009                           ;MyIR.c: 164: Send_Low(338);
  1010  0160  3052               	movlw	82
  1011  0161  00A4               	movwf	?_Send_Low
  1012  0162  3001               	movlw	1
  1013  0163  00A5               	movwf	?_Send_Low+1
  1014  0164  296D               	goto	L1
  1015  0165                     l10472:	
  1016                           ;MyIR.c: 165: }else{
  1017                           
  1018                           
  1019                           ;MyIR.c: 166: Send_High(560);
  1020  0165  3030               	movlw	48
  1021  0166  00A7               	movwf	?_Send_High
  1022  0167  3002               	movlw	2
  1023  0168  00A8               	movwf	?_Send_High+1
  1024  0169  224D               	fcall	_Send_High
  1025                           
  1026                           ;MyIR.c: 167: Send_Low(112);
  1027  016A  3070               	movlw	112
  1028  016B  00A4               	movwf	?_Send_Low
  1029  016C  01A5               	clrf	?_Send_Low+1
  1030  016D                     L1:	
  1031  016D  2307               	fcall	_Send_Low
  1032  016E  3020               	movlw	32
  1033                           
  1034                           ;MyIR.c: 168: }
  1035                           ;MyIR.c: 169: irdata <<= 1;
  1036  016F  1003               	clrc
  1037  0170  0DA9               	rlf	IR_SEND@irdata,f
  1038  0171  0DAA               	rlf	IR_SEND@irdata+1,f
  1039  0172  0DAB               	rlf	IR_SEND@irdata+2,f
  1040  0173  0DAC               	rlf	IR_SEND@irdata+3,f
  1041  0174  0AAD               	incf	IR_SEND@i,f
  1042  0175  022D               	subwf	IR_SEND@i,w
  1043  0176  1C03               	skipc
  1044  0177  2959               	goto	l5491
  1045                           
  1046                           ;MyIR.c: 170: }
  1047                           ;MyIR.c: 171: Send_High(560);
  1048  0178  3030               	movlw	48
  1049  0179  00A7               	movwf	?_Send_High
  1050  017A  3002               	movlw	2
  1051  017B  00A8               	movwf	?_Send_High+1
  1052  017C  224D               	fcall	_Send_High
  1053                           
  1054                           ;MyIR.c: 172: Send_Low(0);
  1055  017D  01A4               	clrf	?_Send_Low
  1056  017E  01A5               	clrf	?_Send_Low+1
  1057  017F  2B07               	ljmp	l10456
  1058  0180                     __end_of_IR_SEND:	
  1059                           
  1060                           	psect	text526
  1061  0307                     __ptext526:	
  1062 ;; =============== function _IR_SEND ends ============
  1063                           
  1064                           
  1065 ;; *************** function _Send_Low *****************
  1066 ;; Defined at:
  1067 ;;		line 151 in file "MyIR.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;  nus             2    4[BANK0 ] unsigned int 
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;		None
  1072 ;; Return value:  Size  Location     Type
  1073 ;;		None               void
  1074 ;; Registers used:
  1075 ;;		wreg, status,2, status,0, pclath, cstack
  1076 ;; Tracked objects:
  1077 ;;		On entry : 60/0
  1078 ;;		On exit  : 60/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMMON   BANK0   BANK1
  1081 ;;      Params:         0       2       0
  1082 ;;      Locals:         0       0       0
  1083 ;;      Temps:          0       0       0
  1084 ;;      Totals:         0       2       0
  1085 ;;Total ram usage:        2 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; Hardware stack levels required when called:    3
  1088 ;; This function calls:
  1089 ;;		_Delay_xus
  1090 ;; This function is called by:
  1091 ;;		_IR_SEND
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094  0307                     _Send_Low:	
  1095  0307                     l10456:	
  1096                           ; Regs used in _Send_Low: [wreg+status,2+status,0+pclath+cstack]
  1097                           
  1098                           
  1099                           ;MyIR.c: 152: PC2 = 0;
  1100  0307  1107               	bcf	7,2
  1101                           
  1102                           ;MyIR.c: 153: Delay_xus(nus);
  1103  0308  0825               	movf	Send_Low@nus+1,w
  1104  0309  00A1               	movwf	?_Delay_xus+1
  1105  030A  0824               	movf	Send_Low@nus,w
  1106  030B  00A0               	movwf	?_Delay_xus
  1107  030C  2AA1               	ljmp	l10404
  1108  030D                     __end_of_Send_Low:	
  1109                           
  1110                           	psect	text527
  1111  021A                     __ptext527:	
  1112 ;; =============== function _Send_Low ends ============
  1113                           
  1114                           
  1115 ;; *************** function _LED_Study_End *****************
  1116 ;; Defined at:
  1117 ;;		line 87 in file "MyConfiguration.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;		None
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;		None
  1122 ;; Return value:  Size  Location     Type
  1123 ;;		None               void
  1124 ;; Registers used:
  1125 ;;		wreg, status,2, status,0, pclath, cstack
  1126 ;; Tracked objects:
  1127 ;;		On entry : 60/20
  1128 ;;		On exit  : 60/0
  1129 ;;		Unchanged: 0/0
  1130 ;; Data sizes:     COMMON   BANK0   BANK1
  1131 ;;      Params:         0       0       0
  1132 ;;      Locals:         0       0       0
  1133 ;;      Temps:          0       0       0
  1134 ;;      Totals:         0       0       0
  1135 ;;Total ram usage:        0 bytes
  1136 ;; Hardware stack levels used:    1
  1137 ;; Hardware stack levels required when called:    3
  1138 ;; This function calls:
  1139 ;;		_Delay_xms
  1140 ;; This function is called by:
  1141 ;;		_main
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144  021A                     _LED_Study_End:	
  1145  021A  3032               	movlw	50
  1146                           
  1147                           ;MyConfiguration.c: 88: PC3 = 1;
  1148                           
  1149                           ; Regs used in _LED_Study_End: [wreg+status,2+status,0+pclath+cstack]
  1150  021B  1283               	bcf	3,5	;RP0=0, select bank0
  1151  021C  1587               	bsf	7,3
  1152                           
  1153                           ;MyConfiguration.c: 89: Delay_xms(50);
  1154  021D  00A0               	movwf	?_Delay_xms
  1155  021E  01A1               	clrf	?_Delay_xms+1
  1156  021F  2234               	fcall	_Delay_xms
  1157                           
  1158                           ;MyConfiguration.c: 90: PC3 = 0;
  1159                           
  1160                           ;MyConfiguration.c: 91: Delay_xms(50);
  1161  0220  222A               	fcall	PL2	;call to abstracted procedure
  1162  0221  2234               	fcall	_Delay_xms
  1163                           
  1164                           ;MyConfiguration.c: 92: PC3 = 1;
  1165                           
  1166                           ;MyConfiguration.c: 93: Delay_xms(50);
  1167  0222  222F               	fcall	PL3	;call to abstracted procedure
  1168  0223  2234               	fcall	_Delay_xms
  1169                           
  1170                           ;MyConfiguration.c: 94: PC3 = 0;
  1171                           
  1172                           ;MyConfiguration.c: 95: Delay_xms(50);
  1173  0224  222A               	fcall	PL2	;call to abstracted procedure
  1174  0225  2234               	fcall	_Delay_xms
  1175                           
  1176                           ;MyConfiguration.c: 96: PC3 = 1;
  1177                           
  1178                           ;MyConfiguration.c: 97: Delay_xms(50);
  1179  0226  222F               	fcall	PL3	;call to abstracted procedure
  1180  0227  2234               	fcall	_Delay_xms
  1181                           
  1182                           ;MyConfiguration.c: 98: PC3 = 0;
  1183                           
  1184                           ;MyConfiguration.c: 99: Delay_xms(50);
  1185  0228  222A               	fcall	PL2	;call to abstracted procedure
  1186  0229  2A34               	ljmp	l10396
  1187  022A                     __end_of_LED_Study_End:	
  1188  022A                     PL2:	
  1189  022A  3032               	movlw	50
  1190  022B  1187               	bcf	7,3
  1191  022C  00A0               	movwf	?_Delay_xms
  1192  022D  01A1               	clrf	?_Delay_xms+1
  1193  022E  0008               	return
  1194  022F                     PL3:	
  1195  022F  3032               	movlw	50
  1196  0230  1587               	bsf	7,3
  1197  0231  00A0               	movwf	?_Delay_xms
  1198  0232  01A1               	clrf	?_Delay_xms+1
  1199  0233  0008               	return
  1200                           
  1201                           	psect	text528
  1202  0264                     __ptext528:	
  1203 ;; =============== function _LED_Study_End ends ============
  1204                           
  1205                           
  1206 ;; *************** function _ADC_Init *****************
  1207 ;; Defined at:
  1208 ;;		line 19 in file "MyADC.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;		None
  1211 ;; Auto vars:     Size  Location     Type
  1212 ;;		None
  1213 ;; Return value:  Size  Location     Type
  1214 ;;		None               void
  1215 ;; Registers used:
  1216 ;;		wreg, status,2, status,0, pclath, cstack
  1217 ;; Tracked objects:
  1218 ;;		On entry : 17F/0
  1219 ;;		On exit  : 60/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMMON   BANK0   BANK1
  1222 ;;      Params:         0       0       0
  1223 ;;      Locals:         0       0       0
  1224 ;;      Temps:          0       0       0
  1225 ;;      Totals:         0       0       0
  1226 ;;Total ram usage:        0 bytes
  1227 ;; Hardware stack levels used:    1
  1228 ;; Hardware stack levels required when called:    3
  1229 ;; This function calls:
  1230 ;;		_Delay_xms
  1231 ;; This function is called by:
  1232 ;;		_main
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235  0264                     _ADC_Init:	
  1236  0264  3081               	movlw	129
  1237                           
  1238                           ;MyADC.c: 21: TRISC0=1;
  1239                           
  1240                           ; Regs used in _ADC_Init: [wreg+status,2+status,0+pclath+cstack]
  1241  0265  1683               	bsf	3,5	;RP0=1, select bank1
  1242  0266  1407               	bsf	7,0
  1243                           
  1244                           ;MyADC.c: 22: ANSEL4=1;
  1245  0267  1611               	bsf	17,4
  1246                           
  1247                           ;MyADC.c: 25: DIVS=0;
  1248  0268  139F               	bcf	31,7
  1249                           
  1250                           ;MyADC.c: 26: ADCS0=0;ADCS1=0;ADCS2=0;
  1251  0269  121F               	bcf	31,4
  1252  026A  129F               	bcf	31,5
  1253  026B  131F               	bcf	31,6
  1254                           
  1255                           ;MyADC.c: 28: ADCON0=0B10000001;
  1256  026C  1283               	bcf	3,5	;RP0=0, select bank0
  1257  026D  009F               	movwf	31	;volatile
  1258                           
  1259                           ;MyADC.c: 29: VCFG0=0;
  1260  026E  129F               	bcf	31,5
  1261                           
  1262                           ;MyADC.c: 30: CHS0=0;CHS1=0;CHS2=1;
  1263  026F  111F               	bcf	31,2
  1264  0270  119F               	bcf	31,3
  1265  0271  161F               	bsf	31,4
  1266                           
  1267                           ;MyADC.c: 31: ADFM=1;
  1268  0272  179F               	bsf	31,7
  1269                           
  1270                           ;MyADC.c: 32: ADON=1;
  1271  0273  141F               	bsf	31,0
  1272                           
  1273                           ;MyADC.c: 34: Delay_xms(1);
  1274  0274  01A0               	clrf	?_Delay_xms
  1275  0275  0AA0               	incf	?_Delay_xms,f
  1276  0276  01A1               	clrf	?_Delay_xms+1
  1277  0277  2234               	fcall	_Delay_xms
  1278                           
  1279                           ;MyADC.c: 35: GO_DONE=1;
  1280  0278  149F               	bsf	31,1
  1281  0279  0008               	return
  1282  027A                     __end_of_ADC_Init:	
  1283                           
  1284                           	psect	text529
  1285  024D                     __ptext529:	
  1286 ;; =============== function _ADC_Init ends ============
  1287                           
  1288                           
  1289 ;; *************** function _Send_High *****************
  1290 ;; Defined at:
  1291 ;;		line 140 in file "MyIR.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;  nus             2    7[BANK0 ] unsigned int 
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;		None
  1296 ;; Return value:  Size  Location     Type
  1297 ;;		None               void
  1298 ;; Registers used:
  1299 ;;		wreg, status,2, status,0, pclath, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : 60/0
  1302 ;;		On exit  : 60/0
  1303 ;;		Unchanged: FFF9F/0
  1304 ;; Data sizes:     COMMON   BANK0   BANK1
  1305 ;;      Params:         0       2       0
  1306 ;;      Locals:         0       0       0
  1307 ;;      Temps:          0       0       0
  1308 ;;      Totals:         0       2       0
  1309 ;;Total ram usage:        2 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    3
  1312 ;; This function calls:
  1313 ;;		___lwdiv
  1314 ;; This function is called by:
  1315 ;;		_IR_SEND
  1316 ;; This function uses a non-reentrant model
  1317 ;;
  1318  024D                     _Send_High:	
  1319                           
  1320                           ;MyIR.c: 141: num = nus/15;
  1321                           
  1322                           ; Regs used in _Send_High: [wreg+status,2+status,0+pclath+cstack]
  1323  024D  300F               	movlw	15
  1324  024E  00A0               	movwf	?___lwdiv
  1325  024F  01A1               	clrf	?___lwdiv+1
  1326  0250  0828               	movf	Send_High@nus+1,w
  1327  0251  00A3               	movwf	?___lwdiv+3
  1328  0252  0827               	movf	Send_High@nus,w
  1329  0253  00A2               	movwf	?___lwdiv+2
  1330  0254  21AF               	fcall	___lwdiv
  1331  0255  0821               	movf	?___lwdiv+1,w
  1332  0256  00F8               	movwf	_num+1
  1333  0257  0820               	movf	?___lwdiv,w
  1334  0258  00F7               	movwf	_num
  1335                           
  1336                           ;MyIR.c: 142: count=0;
  1337  0259  01BE               	clrf	_count
  1338  025A  01BF               	clrf	_count+1
  1339                           
  1340                           ;MyIR.c: 143: send_flag = 0;
  1341  025B  01FB               	clrf	_send_flag
  1342                           
  1343                           ;MyIR.c: 144: flag_senf=1;
  1344  025C  01C1               	clrf	_flag_senf
  1345  025D  0AC1               	incf	_flag_senf,f
  1346                           
  1347                           ;MyIR.c: 145: TMR2ON = 1;
  1348  025E  1512               	bsf	18,2
  1349  025F                     l10420:	
  1350                           ;MyIR.c: 146: while(flag_senf);
  1351                           
  1352  025F  08C1               	movf	_flag_senf,f
  1353  0260  1D03               	skipz
  1354  0261  2A5F               	goto	l10420
  1355                           
  1356                           ;MyIR.c: 147: PC2 = 0;
  1357  0262  1107               	bcf	7,2
  1358  0263  0008               	return
  1359  0264                     __end_of_Send_High:	
  1360                           
  1361                           	psect	text530
  1362  02A1                     __ptext530:	
  1363 ;; =============== function _Send_High ends ============
  1364                           
  1365                           
  1366 ;; *************** function _Delay_xus *****************
  1367 ;; Defined at:
  1368 ;;		line 72 in file "MyConfiguration.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;  x               2    0[BANK0 ] unsigned int 
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;  i               2    2[BANK0 ] unsigned int 
  1373 ;; Return value:  Size  Location     Type
  1374 ;;		None               void
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0
  1377 ;; Tracked objects:
  1378 ;;		On entry : 60/0
  1379 ;;		On exit  : 60/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMMON   BANK0   BANK1
  1382 ;;      Params:         0       2       0
  1383 ;;      Locals:         0       2       0
  1384 ;;      Temps:          0       0       0
  1385 ;;      Totals:         0       4       0
  1386 ;;Total ram usage:        4 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    2
  1389 ;; This function calls:
  1390 ;;		Nothing
  1391 ;; This function is called by:
  1392 ;;		_Send_Low
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395  02A1                     _Delay_xus:	
  1396  02A1                     l10404:	
  1397                           ; Regs used in _Delay_xus: [wreg+status,2+status,0]
  1398                           
  1399                           
  1400                           ;MyConfiguration.c: 73: unsigned int i;
  1401                           ;MyConfiguration.c: 74: for(i=0;i<x;i++){
  1402  02A1  01A2               	clrf	Delay_xus@i
  1403  02A2  01A3               	clrf	Delay_xus@i+1
  1404  02A3                     l10408:	
  1405  02A3  0821               	movf	Delay_xus@x+1,w
  1406  02A4  0223               	subwf	Delay_xus@i+1,w
  1407  02A5  1D03               	skipz
  1408  02A6  2AA9               	goto	u565
  1409  02A7  0820               	movf	Delay_xus@x,w
  1410  02A8  0222               	subwf	Delay_xus@i,w
  1411  02A9                     u565:	
  1412  02A9  1803               	btfsc	3,0
  1413  02AA  0008               	return
  1414                           
  1415                           ;MyConfiguration.c: 75: _delay((unsigned long)((1)*(16000000/4000000.0)));
  1416  02AB  2AAC               	nop2	;2 cycle nop
  1417  02AC  2AAD               	nop2	;2 cycle nop
  1418  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  1419  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  1420  02AF  0AA2               	incf	Delay_xus@i,f
  1421  02B0  1903               	skipnz
  1422  02B1  0AA3               	incf	Delay_xus@i+1,f
  1423  02B2  2AA3               	goto	l10408
  1424  02B3                     __end_of_Delay_xus:	
  1425                           
  1426                           	psect	text531
  1427  0234                     __ptext531:	
  1428 ;; =============== function _Delay_xus ends ============
  1429                           
  1430                           
  1431 ;; *************** function _Delay_xms *****************
  1432 ;; Defined at:
  1433 ;;		line 65 in file "MyConfiguration.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;  x               2    0[BANK0 ] unsigned int 
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  i               2    4[BANK0 ] unsigned int 
  1438 ;; Return value:  Size  Location     Type
  1439 ;;		None               void
  1440 ;; Registers used:
  1441 ;;		wreg, status,2, status,0
  1442 ;; Tracked objects:
  1443 ;;		On entry : 60/0
  1444 ;;		On exit  : 60/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMMON   BANK0   BANK1
  1447 ;;      Params:         0       2       0
  1448 ;;      Locals:         0       2       0
  1449 ;;      Temps:          0       2       0
  1450 ;;      Totals:         0       6       0
  1451 ;;Total ram usage:        6 bytes
  1452 ;; Hardware stack levels used:    1
  1453 ;; Hardware stack levels required when called:    2
  1454 ;; This function calls:
  1455 ;;		Nothing
  1456 ;; This function is called by:
  1457 ;;		_Control
  1458 ;;		_ADC_Init
  1459 ;;		_LED_Study_End
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462  0234                     _Delay_xms:	
  1463  0234                     l10396:	
  1464                           ; Regs used in _Delay_xms: [wreg+status,2+status,0]
  1465                           
  1466                           
  1467                           ;MyConfiguration.c: 66: unsigned int i;
  1468                           ;MyConfiguration.c: 67: for(i=0;i<x;i++){
  1469  0234  01A4               	clrf	Delay_xms@i
  1470  0235  01A5               	clrf	Delay_xms@i+1
  1471  0236                     l10402:	
  1472  0236  0821               	movf	Delay_xms@x+1,w
  1473  0237  0225               	subwf	Delay_xms@i+1,w
  1474  0238  1D03               	skipz
  1475  0239  2A3C               	goto	u555
  1476  023A  0820               	movf	Delay_xms@x,w
  1477  023B  0224               	subwf	Delay_xms@i,w
  1478  023C                     u555:	
  1479  023C  1803               	btfsc	3,0
  1480  023D  0008               	return
  1481                           
  1482                           ;MyConfiguration.c: 68: _delay((unsigned long)((1)*(16000000/4000.0)));
  1483  023E  3006               	movlw	6
  1484  023F  00A3               	movwf	??_Delay_xms+1
  1485  0240  3030               	movlw	48
  1486  0241  00A2               	movwf	??_Delay_xms
  1487  0242                     u657:	
  1488  0242  0BA2               	decfsz	??_Delay_xms,f
  1489  0243  2A42               	goto	u657
  1490  0244  0BA3               	decfsz	??_Delay_xms+1,f
  1491  0245  2A42               	goto	u657
  1492  0246  0064               	clrwdt
  1493  0247  1283               	bcf	3,5	;RP0=0, select bank0
  1494  0248  1303               	bcf	3,6	;RP1=0, select bank0
  1495  0249  0AA4               	incf	Delay_xms@i,f
  1496  024A  1903               	skipnz
  1497  024B  0AA5               	incf	Delay_xms@i+1,f
  1498  024C  2A36               	goto	l10402
  1499  024D                     __end_of_Delay_xms:	
  1500                           
  1501                           	psect	text532
  1502  00E2                     __ptext532:	
  1503 ;; =============== function _Delay_xms ends ============
  1504                           
  1505                           
  1506 ;; *************** function _VS1838_Process *****************
  1507 ;; Defined at:
  1508 ;;		line 82 in file "MyIR.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;		None
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;  Data_L          1    5[BANK0 ] unsigned char 
  1513 ;;  Data_H          1    4[BANK0 ] unsigned char 
  1514 ;;  Address_L       1    3[BANK0 ] unsigned char 
  1515 ;;  Address_H       1    2[BANK0 ] unsigned char 
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  1    wreg      unsigned char 
  1518 ;; Registers used:
  1519 ;;		wreg, status,2, status,0, pclath, cstack
  1520 ;; Tracked objects:
  1521 ;;		On entry : 60/0
  1522 ;;		On exit  : 60/0
  1523 ;;		Unchanged: FFE00/0
  1524 ;; Data sizes:     COMMON   BANK0   BANK1
  1525 ;;      Params:         0       0       0
  1526 ;;      Locals:         0       4       0
  1527 ;;      Temps:          0       0       0
  1528 ;;      Totals:         0       4       0
  1529 ;;Total ram usage:        4 bytes
  1530 ;; Hardware stack levels used:    1
  1531 ;; Hardware stack levels required when called:    3
  1532 ;; This function calls:
  1533 ;;		_Write_EEPROM_u8
  1534 ;; This function is called by:
  1535 ;;		_Control
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538  00E2                     _VS1838_Process:	
  1539                           
  1540                           ;MyIR.c: 83: unsigned char Address_H,Address_L;
  1541                           ;MyIR.c: 84: unsigned char Data_H,Data_L;
  1542                           ;MyIR.c: 86: if(VS1838_receive_ok==1)
  1543                           
  1544                           ; Regs used in _VS1838_Process: [wreg+status,2+status,0+pclath+cstack]
  1545  00E2  0B40               	decfsz	_VS1838_receive_ok,w
  1546  00E3  3400               	retlw	0
  1547                           
  1548                           ;MyIR.c: 87: {
  1549                           ;MyIR.c: 88: Address_H=VS838_Receive_Data>>24;
  1550  00E4  0839               	movf	_VS838_Receive_Data+3,w
  1551  00E5  00A2               	movwf	VS1838_Process@Address_H
  1552                           
  1553                           ;MyIR.c: 89: Address_L=(VS838_Receive_Data>>16)&0xff;
  1554  00E6  0838               	movf	_VS838_Receive_Data+2,w
  1555  00E7  00A3               	movwf	VS1838_Process@Address_L
  1556                           
  1557                           ;MyIR.c: 90: if((Address_H==(unsigned char)~Address_L))
  1558  00E8  0923               	comf	VS1838_Process@Address_L,w
  1559  00E9  0622               	xorwf	VS1838_Process@Address_H,w
  1560  00EA  1D03               	skipz
  1561  00EB  3400               	retlw	0
  1562                           
  1563                           ;MyIR.c: 91: {
  1564                           ;MyIR.c: 92: Data_H=VS838_Receive_Data>>8;
  1565  00EC  0837               	movf	_VS838_Receive_Data+1,w
  1566  00ED  00A4               	movwf	VS1838_Process@Data_H
  1567                           
  1568                           ;MyIR.c: 93: Data_L=VS838_Receive_Data;
  1569  00EE  0836               	movf	_VS838_Receive_Data,w
  1570  00EF  00A5               	movwf	VS1838_Process@Data_L
  1571                           
  1572                           ;MyIR.c: 94: if(Data_H==(unsigned char)~Data_L)
  1573  00F0  0925               	comf	VS1838_Process@Data_L,w
  1574  00F1  0624               	xorwf	VS1838_Process@Data_H,w
  1575  00F2  1D03               	skipz
  1576  00F3  3400               	retlw	0
  1577                           
  1578                           ;MyIR.c: 95: {
  1579                           ;MyIR.c: 97: Write_EEPROM_u8(0X00,Address_H);
  1580  00F4  0822               	movf	VS1838_Process@Address_H,w
  1581  00F5  00A0               	movwf	?_Write_EEPROM_u8
  1582  00F6  3000               	movlw	0
  1583  00F7  21FD               	fcall	_Write_EEPROM_u8
  1584                           
  1585                           ;MyIR.c: 98: Write_EEPROM_u8(0X01,Address_L);
  1586  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  1587  00F9  0823               	movf	VS1838_Process@Address_L,w
  1588  00FA  00A0               	movwf	?_Write_EEPROM_u8
  1589  00FB  3001               	movlw	1
  1590  00FC  21FD               	fcall	_Write_EEPROM_u8
  1591                           
  1592                           ;MyIR.c: 99: Write_EEPROM_u8(0X02,Data_H);
  1593  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1594  00FE  0824               	movf	VS1838_Process@Data_H,w
  1595  00FF  00A0               	movwf	?_Write_EEPROM_u8
  1596  0100  3002               	movlw	2
  1597  0101  21FD               	fcall	_Write_EEPROM_u8
  1598                           
  1599                           ;MyIR.c: 100: Write_EEPROM_u8(0X03,Data_L);
  1600  0102  1283               	bcf	3,5	;RP0=0, select bank0
  1601  0103  0825               	movf	VS1838_Process@Data_L,w
  1602  0104  00A0               	movwf	?_Write_EEPROM_u8
  1603  0105  3003               	movlw	3
  1604  0106  21FD               	fcall	_Write_EEPROM_u8
  1605                           
  1606                           ;MyIR.c: 101: IR_DATA_t = VS838_Receive_Data;
  1607  0107  1283               	bcf	3,5	;RP0=0, select bank0
  1608  0108  0839               	movf	_VS838_Receive_Data+3,w
  1609  0109  00B5               	movwf	_IR_DATA_t+3
  1610  010A  0838               	movf	_VS838_Receive_Data+2,w
  1611  010B  00B4               	movwf	_IR_DATA_t+2
  1612  010C  0837               	movf	_VS838_Receive_Data+1,w
  1613  010D  00B3               	movwf	_IR_DATA_t+1
  1614  010E  0836               	movf	_VS838_Receive_Data,w
  1615  010F  00B2               	movwf	_IR_DATA_t
  1616  0110  3001               	movlw	1
  1617                           
  1618                           ;MyIR.c: 102: VS1838_Status=0;
  1619  0111  01FA               	clrf	_VS1838_Status
  1620                           
  1621                           ;MyIR.c: 103: VS838_Receive_Data=0;
  1622  0112  01B6               	clrf	_VS838_Receive_Data
  1623  0113  01B7               	clrf	_VS838_Receive_Data+1
  1624  0114  01B8               	clrf	_VS838_Receive_Data+2
  1625  0115  01B9               	clrf	_VS838_Receive_Data+3
  1626                           
  1627                           ;MyIR.c: 104: VS1838_receive_ok=0;
  1628  0116  01C0               	clrf	_VS1838_receive_ok
  1629                           
  1630                           ;MyIR.c: 105: return 1;
  1631  0117  0008               	return
  1632  0118                     __end_of_VS1838_Process:	
  1633                           ;MyIR.c: 106: }
  1634                           ;MyIR.c: 107: }
  1635                           ;MyIR.c: 108: }
  1636                           ;MyIR.c: 109: return 0;
  1637                           
  1638                           
  1639                           	psect	text533
  1640  0118                     __ptext533:	
  1641 ;; =============== function _VS1838_Process ends ============
  1642                           
  1643                           
  1644 ;; *************** function _Read_IRData *****************
  1645 ;; Defined at:
  1646 ;;		line 119 in file "MyIR.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;		None
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  data_t          4   14[BANK0 ] unsigned long 
  1651 ;;  Data_L          1   13[BANK0 ] unsigned char 
  1652 ;;  Data_H          1   12[BANK0 ] unsigned char 
  1653 ;;  Address_L       1   11[BANK0 ] unsigned char 
  1654 ;;  Address_H       1   10[BANK0 ] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  4    2[BANK0 ] unsigned long 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, pclath, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 60/0
  1661 ;;		On exit  : 60/0
  1662 ;;		Unchanged: FFF9F/0
  1663 ;; Data sizes:     COMMON   BANK0   BANK1
  1664 ;;      Params:         0       4       0
  1665 ;;      Locals:         0       8       0
  1666 ;;      Temps:          0       4       0
  1667 ;;      Totals:         0      16       0
  1668 ;;Total ram usage:       16 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    3
  1671 ;; This function calls:
  1672 ;;		_Read_EEPROM_u8
  1673 ;; This function is called by:
  1674 ;;		_main
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677  0118                     _Read_IRData:	
  1678                           
  1679                           ;MyIR.c: 121: unsigned char Address_H,Address_L;
  1680                           ;MyIR.c: 122: unsigned char Data_H,Data_L;
  1681                           ;MyIR.c: 124: Address_H = Read_EEPROM_u8(0x00);
  1682                           
  1683                           ; Regs used in _Read_IRData: [wreg+status,2+pclath+cstack]
  1684  0118  3000               	movlw	0
  1685  0119  22C4               	fcall	_Read_EEPROM_u8
  1686  011A  00AA               	movwf	Read_IRData@Address_H
  1687                           
  1688                           ;MyIR.c: 125: Address_L = Read_EEPROM_u8(0x01);
  1689  011B  3001               	movlw	1
  1690  011C  22C4               	fcall	_Read_EEPROM_u8
  1691  011D  00AB               	movwf	Read_IRData@Address_L
  1692                           
  1693                           ;MyIR.c: 126: Data_H = Read_EEPROM_u8(0x02);
  1694  011E  3002               	movlw	2
  1695  011F  22C4               	fcall	_Read_EEPROM_u8
  1696  0120  00AC               	movwf	Read_IRData@Data_H
  1697                           
  1698                           ;MyIR.c: 127: Data_L = Read_EEPROM_u8(0x03);
  1699  0121  3003               	movlw	3
  1700  0122  22C4               	fcall	_Read_EEPROM_u8
  1701  0123  00AD               	movwf	Read_IRData@Data_L
  1702                           
  1703                           ;MyIR.c: 128: data_t = (unsigned long int)( ( (unsigned long int)(((unsigned int)Address
      +                          _H<<8)|Address_L) << 16 )|( ((unsigned int)Data_H << 8) | Data_L ) );
  1704  0124  082B               	movf	Read_IRData@Address_L,w
  1705  0125  00A6               	movwf	??_Read_IRData
  1706  0126  082A               	movf	Read_IRData@Address_H,w
  1707  0127  00A7               	movwf	??_Read_IRData+1
  1708  0128  01A8               	clrf	??_Read_IRData+2
  1709  0129  01A9               	clrf	??_Read_IRData+3
  1710  012A  00A9               	movwf	??_Read_IRData+3
  1711  012B  0826               	movf	??_Read_IRData,w
  1712  012C  00A8               	movwf	??_Read_IRData+2
  1713  012D  01A7               	clrf	??_Read_IRData+1
  1714  012E  01A6               	clrf	??_Read_IRData
  1715  012F  0829               	movf	??_Read_IRData+3,w
  1716  0130  00B1               	movwf	Read_IRData@data_t+3
  1717  0131  0828               	movf	??_Read_IRData+2,w
  1718  0132  00B0               	movwf	Read_IRData@data_t+2
  1719  0133  0827               	movf	??_Read_IRData+1,w
  1720  0134  00AF               	movwf	Read_IRData@data_t+1
  1721  0135  0826               	movf	??_Read_IRData,w
  1722  0136  00AE               	movwf	Read_IRData@data_t
  1723  0137  082D               	movf	Read_IRData@Data_L,w
  1724  0138  00A6               	movwf	??_Read_IRData
  1725  0139  082C               	movf	Read_IRData@Data_H,w
  1726  013A  00A7               	movwf	??_Read_IRData+1
  1727  013B  01A8               	clrf	??_Read_IRData+2
  1728  013C  01A9               	clrf	??_Read_IRData+3
  1729  013D  0826               	movf	??_Read_IRData,w
  1730  013E  04AE               	iorwf	Read_IRData@data_t,f
  1731  013F  0827               	movf	??_Read_IRData+1,w
  1732  0140  04AF               	iorwf	Read_IRData@data_t+1,f
  1733  0141  0828               	movf	??_Read_IRData+2,w
  1734  0142  04B0               	iorwf	Read_IRData@data_t+2,f
  1735  0143  0829               	movf	??_Read_IRData+3,w
  1736  0144  04B1               	iorwf	Read_IRData@data_t+3,f
  1737                           
  1738                           ;MyIR.c: 129: return data_t;
  1739  0145  0831               	movf	Read_IRData@data_t+3,w
  1740  0146  00A5               	movwf	?_Read_IRData+3
  1741  0147  0830               	movf	Read_IRData@data_t+2,w
  1742  0148  00A4               	movwf	?_Read_IRData+2
  1743  0149  082F               	movf	Read_IRData@data_t+1,w
  1744  014A  00A3               	movwf	?_Read_IRData+1
  1745  014B  082E               	movf	Read_IRData@data_t,w
  1746  014C  00A2               	movwf	?_Read_IRData
  1747  014D  0008               	return
  1748  014E                     __end_of_Read_IRData:	
  1749                           
  1750                           	psect	text534
  1751  02E7                     __ptext534:	
  1752 ;; =============== function _Read_IRData ends ============
  1753                           
  1754                           
  1755 ;; *************** function _EEPROM_Init *****************
  1756 ;; Defined at:
  1757 ;;		line 14 in file "MyEEProm.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;		None
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;		None               void
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0, pclath, cstack
  1766 ;; Tracked objects:
  1767 ;;		On entry : 60/0
  1768 ;;		On exit  : 60/20
  1769 ;;		Unchanged: FFE00/0
  1770 ;; Data sizes:     COMMON   BANK0   BANK1
  1771 ;;      Params:         0       0       0
  1772 ;;      Locals:         0       0       0
  1773 ;;      Temps:          0       0       0
  1774 ;;      Totals:         0       0       0
  1775 ;;Total ram usage:        0 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    3
  1778 ;; This function calls:
  1779 ;;		_Write_EEPROM_u8
  1780 ;; This function is called by:
  1781 ;;		_main
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784  02E7                     _EEPROM_Init:	
  1785                           
  1786                           ;MyEEProm.c: 15: Write_EEPROM_u8(0xFF,0xAA);
  1787                           
  1788                           ; Regs used in _EEPROM_Init: [wreg+status,2+status,0+pclath+cstack]
  1789  02E7  30AA               	movlw	170
  1790  02E8  00A0               	movwf	?_Write_EEPROM_u8
  1791  02E9  30FF               	movlw	255
  1792  02EA  21FD               	fcall	_Write_EEPROM_u8
  1793                           
  1794                           ;MyEEProm.c: 16: Write_EEPROM_u8(0xFF,0xAA);
  1795  02EB  30AA               	movlw	170
  1796  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  1797  02ED  00A0               	movwf	?_Write_EEPROM_u8
  1798  02EE  30FF               	movlw	255
  1799  02EF  29FD               	ljmp	_Write_EEPROM_u8
  1800  02F0                     __end_of_EEPROM_Init:	
  1801                           
  1802                           	psect	text535
  1803  01AF                     __ptext535:	
  1804 ;; =============== function _EEPROM_Init ends ============
  1805                           
  1806                           
  1807 ;; *************** function ___lwdiv *****************
  1808 ;; Defined at:
  1809 ;;		line 5 in file "D:\EmbeddedTools\MS_MCU\HI-TECH Software\PICC\9.83\sources\lwdiv.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;  divisor         2    0[BANK0 ] unsigned int 
  1812 ;;  dividend        2    2[BANK0 ] unsigned int 
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;  quotient        2    4[BANK0 ] unsigned int 
  1815 ;;  counter         1    6[BANK0 ] unsigned char 
  1816 ;; Return value:  Size  Location     Type
  1817 ;;                  2    0[BANK0 ] unsigned int 
  1818 ;; Registers used:
  1819 ;;		wreg, status,2, status,0
  1820 ;; Tracked objects:
  1821 ;;		On entry : 60/0
  1822 ;;		On exit  : 60/0
  1823 ;;		Unchanged: FFF9F/0
  1824 ;; Data sizes:     COMMON   BANK0   BANK1
  1825 ;;      Params:         0       4       0
  1826 ;;      Locals:         0       3       0
  1827 ;;      Temps:          0       0       0
  1828 ;;      Totals:         0       7       0
  1829 ;;Total ram usage:        7 bytes
  1830 ;; Hardware stack levels used:    1
  1831 ;; Hardware stack levels required when called:    2
  1832 ;; This function calls:
  1833 ;;		Nothing
  1834 ;; This function is called by:
  1835 ;;		_Send_High
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838  01AF                     ___lwdiv:	
  1839                           
  1840                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1841  01AF  01A4               	clrf	___lwdiv@quotient
  1842  01B0  01A5               	clrf	___lwdiv@quotient+1
  1843  01B1  0821               	movf	___lwdiv@divisor+1,w
  1844  01B2  0420               	iorwf	___lwdiv@divisor,w
  1845  01B3  1903               	skipnz
  1846  01B4  29D4               	goto	l10350
  1847  01B5  01A6               	clrf	___lwdiv@counter
  1848  01B6                     L2:	
  1849  01B6  0AA6               	incf	___lwdiv@counter,f
  1850  01B7  1BA1               	btfsc	___lwdiv@divisor+1,7
  1851  01B8  29BD               	goto	l10338
  1852  01B9  1003               	clrc
  1853  01BA  0DA0               	rlf	___lwdiv@divisor,f
  1854  01BB  0DA1               	rlf	___lwdiv@divisor+1,f
  1855  01BC  29B6               	goto	L2
  1856  01BD                     l10338:	
  1857  01BD  1003               	clrc
  1858  01BE  0DA4               	rlf	___lwdiv@quotient,f
  1859  01BF  0DA5               	rlf	___lwdiv@quotient+1,f
  1860  01C0  0821               	movf	___lwdiv@divisor+1,w
  1861  01C1  0223               	subwf	___lwdiv@dividend+1,w
  1862  01C2  1D03               	skipz
  1863  01C3  29C6               	goto	u505
  1864  01C4  0820               	movf	___lwdiv@divisor,w
  1865  01C5  0222               	subwf	___lwdiv@dividend,w
  1866  01C6                     u505:	
  1867  01C6  1C03               	skipc
  1868  01C7  29D0               	goto	L3
  1869  01C8  0820               	movf	___lwdiv@divisor,w
  1870  01C9  02A2               	subwf	___lwdiv@dividend,f
  1871  01CA  0821               	movf	___lwdiv@divisor+1,w
  1872  01CB  1C03               	skipc
  1873  01CC  03A3               	decf	___lwdiv@dividend+1,f
  1874  01CD  02A3               	subwf	___lwdiv@dividend+1,f
  1875  01CE  1424               	bsf	___lwdiv@quotient,0
  1876  01CF  1003               	clrc
  1877  01D0                     L3:	
  1878  01D0  0CA1               	rrf	___lwdiv@divisor+1,f
  1879  01D1  0CA0               	rrf	___lwdiv@divisor,f
  1880  01D2  0BA6               	decfsz	___lwdiv@counter,f
  1881  01D3  29BD               	goto	l10338
  1882  01D4                     l10350:	
  1883  01D4  0825               	movf	___lwdiv@quotient+1,w
  1884  01D5  00A1               	movwf	?___lwdiv+1
  1885  01D6  0824               	movf	___lwdiv@quotient,w
  1886  01D7  00A0               	movwf	?___lwdiv
  1887  01D8  0008               	return
  1888  01D9                     __end_of___lwdiv:	
  1889                           
  1890                           	psect	text536
  1891  02C4                     __ptext536:	
  1892 ;; =============== function ___lwdiv ends ============
  1893                           
  1894                           
  1895 ;; *************** function _Read_EEPROM_u8 *****************
  1896 ;; Defined at:
  1897 ;;		line 51 in file "MyEEProm.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  EEAddress       1    wreg     unsigned char 
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;  EEAddress       1    0[BANK0 ] unsigned char 
  1902 ;;  EepromData      1    1[BANK0 ] unsigned char 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      unsigned char 
  1905 ;; Registers used:
  1906 ;;		wreg, status,2
  1907 ;; Tracked objects:
  1908 ;;		On entry : 60/0
  1909 ;;		On exit  : 60/0
  1910 ;;		Unchanged: FFF9F/0
  1911 ;; Data sizes:     COMMON   BANK0   BANK1
  1912 ;;      Params:         0       0       0
  1913 ;;      Locals:         0       2       0
  1914 ;;      Temps:          0       0       0
  1915 ;;      Totals:         0       2       0
  1916 ;;Total ram usage:        2 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    2
  1919 ;; This function calls:
  1920 ;;		Nothing
  1921 ;; This function is called by:
  1922 ;;		_Read_IRData
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925  02C4                     _Read_EEPROM_u8:	
  1926                           
  1927                           ; Regs used in _Read_EEPROM_u8: [wreg+status,2]
  1928                           ;Read_EEPROM_u8@EEAddress stored from wreg
  1929  02C4  00A0               	movwf	Read_EEPROM_u8@EEAddress
  1930                           
  1931                           ;MyEEProm.c: 53: EEADR = EEAddress;
  1932  02C5  1683               	bsf	3,5	;RP0=1, select bank1
  1933  02C6  009B               	movwf	27	;volatile
  1934                           
  1935                           ;MyEEProm.c: 54: RD = 1;
  1936  02C7  141C               	bsf	28,0
  1937                           
  1938                           ;MyEEProm.c: 55: EepromData = EEDAT;
  1939  02C8  081A               	movf	26,w	;volatile
  1940  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  1941  02CA  00A1               	movwf	Read_EEPROM_u8@EepromData
  1942                           
  1943                           ;MyEEProm.c: 56: RD = 0;
  1944  02CB  1683               	bsf	3,5	;RP0=1, select bank1
  1945  02CC  101C               	bcf	28,0
  1946                           
  1947                           ;MyEEProm.c: 57: return EepromData;
  1948  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  1949  02CE  0821               	movf	Read_EEPROM_u8@EepromData,w
  1950  02CF  0008               	return
  1951  02D0                     __end_of_Read_EEPROM_u8:	
  1952                           
  1953                           	psect	text537
  1954  01FD                     __ptext537:	
  1955 ;; =============== function _Read_EEPROM_u8 ends ============
  1956                           
  1957                           
  1958 ;; *************** function _Write_EEPROM_u8 *****************
  1959 ;; Defined at:
  1960 ;;		line 37 in file "MyEEProm.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;  EEAddress       1    wreg     unsigned char 
  1963 ;;  EEDatas         1    0[BANK0 ] unsigned char 
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;  EEAddress       1    1[BANK0 ] unsigned char 
  1966 ;; Return value:  Size  Location     Type
  1967 ;;		None               void
  1968 ;; Registers used:
  1969 ;;		wreg
  1970 ;; Tracked objects:
  1971 ;;		On entry : 60/0
  1972 ;;		On exit  : 60/20
  1973 ;;		Unchanged: FFE00/0
  1974 ;; Data sizes:     COMMON   BANK0   BANK1
  1975 ;;      Params:         0       1       0
  1976 ;;      Locals:         0       1       0
  1977 ;;      Temps:          0       0       0
  1978 ;;      Totals:         0       2       0
  1979 ;;Total ram usage:        2 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    2
  1982 ;; This function calls:
  1983 ;;		Nothing
  1984 ;; This function is called by:
  1985 ;;		_EEPROM_Init
  1986 ;;		_VS1838_Process
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989  01FD                     _Write_EEPROM_u8:	
  1990                           
  1991                           ; Regs used in _Write_EEPROM_u8: [wreg]
  1992                           ;Write_EEPROM_u8@EEAddress stored from wreg
  1993  01FD  00A1               	movwf	Write_EEPROM_u8@EEAddress
  1994                           
  1995                           ;MyEEProm.c: 38: GIE = 0;
  1996  01FE  138B               	bcf	11,7
  1997  01FF                     l4358:	
  1998                           ;MyEEProm.c: 39: while(GIE) asm("clrwdt");
  1999                           
  2000  01FF  1F8B               	btfss	11,7
  2001  0200  2A03               	goto	l10224
  2002  0201  0064               	clrwdt	;#
  2003  0202  29FF               	goto	l4358
  2004  0203                     l10224:	
  2005                           
  2006                           ;MyEEProm.c: 40: EEADR = EEAddress;
  2007  0203  1283               	bcf	3,5	;RP0=0, select bank0
  2008  0204  1303               	bcf	3,6	;RP1=0, select bank0
  2009  0205  0821               	movf	Write_EEPROM_u8@EEAddress,w
  2010  0206  1683               	bsf	3,5	;RP0=1, select bank1
  2011  0207  009B               	movwf	27	;volatile
  2012                           
  2013                           ;MyEEProm.c: 41: EEDAT = EEDatas;
  2014  0208  1283               	bcf	3,5	;RP0=0, select bank0
  2015  0209  0820               	movf	Write_EEPROM_u8@EEDatas,w
  2016  020A  1683               	bsf	3,5	;RP0=1, select bank1
  2017  020B  009A               	movwf	26	;volatile
  2018  020C  3034               	movlw	52
  2019                           
  2020                           ;MyEEProm.c: 42: EEIF = 0;
  2021  020D  1283               	bcf	3,5	;RP0=0, select bank0
  2022  020E  138C               	bcf	12,7
  2023                           
  2024                           ;MyEEProm.c: 43: EECON1 = 0x34;
  2025  020F  1683               	bsf	3,5	;RP0=1, select bank1
  2026  0210  009C               	movwf	28	;volatile
  2027                           
  2028                           ;MyEEProm.c: 44: WR = 1;
  2029  0211  141D               	bsf	29,0
  2030  0212                     l4361:	
  2031                           ;MyEEProm.c: 45: while(WR) asm("clrwdt");
  2032                           
  2033  0212  1683               	bsf	3,5	;RP0=1, select bank1
  2034  0213  1303               	bcf	3,6	;RP1=0, select bank1
  2035  0214  1C1D               	btfss	29,0
  2036  0215  2A18               	goto	l4363
  2037  0216  0064               	clrwdt	;#
  2038  0217  2A12               	goto	l4361
  2039  0218                     l4363:	
  2040                           
  2041                           ;MyEEProm.c: 47: GIE = 1;
  2042  0218  178B               	bsf	11,7
  2043  0219  0008               	return
  2044  021A                     __end_of_Write_EEPROM_u8:	
  2045                           
  2046                           	psect	text538
  2047  028E                     __ptext538:	
  2048 ;; =============== function _Write_EEPROM_u8 ends ============
  2049                           
  2050                           
  2051 ;; *************** function _GetADCValue *****************
  2052 ;; Defined at:
  2053 ;;		line 39 in file "MyADC.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;		None
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;  ADC_num         2    2[BANK0 ] unsigned int 
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  2    0[BANK0 ] unsigned int 
  2060 ;; Registers used:
  2061 ;;		wreg, status,2
  2062 ;; Tracked objects:
  2063 ;;		On entry : 60/0
  2064 ;;		On exit  : 60/0
  2065 ;;		Unchanged: FFF9F/0
  2066 ;; Data sizes:     COMMON   BANK0   BANK1
  2067 ;;      Params:         0       2       0
  2068 ;;      Locals:         0       2       0
  2069 ;;      Temps:          0       0       0
  2070 ;;      Totals:         0       4       0
  2071 ;;Total ram usage:        4 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    2
  2074 ;; This function calls:
  2075 ;;		Nothing
  2076 ;; This function is called by:
  2077 ;;		_Control
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080  028E                     _GetADCValue:	
  2081                           
  2082                           ;MyADC.c: 40: unsigned int ADC_num=0;
  2083                           
  2084                           ; Regs used in _GetADCValue: [wreg+status,2]
  2085  028E  01A2               	clrf	GetADCValue@ADC_num
  2086  028F  01A3               	clrf	GetADCValue@ADC_num+1
  2087                           
  2088                           ;MyADC.c: 42: if(GO_DONE==0){
  2089  0290  189F               	btfsc	31,1
  2090  0291  2A9C               	goto	l2191
  2091                           
  2092                           ;MyADC.c: 43: ADC_num=ADRESH;
  2093  0292  081E               	movf	30,w	;volatile
  2094  0293  00A2               	movwf	GetADCValue@ADC_num
  2095  0294  01A3               	clrf	GetADCValue@ADC_num+1
  2096                           
  2097                           ;MyADC.c: 44: ADC_num=ADC_num<<8;
  2098  0295  00A3               	movwf	GetADCValue@ADC_num+1
  2099  0296  01A2               	clrf	GetADCValue@ADC_num
  2100                           
  2101                           ;MyADC.c: 45: ADC_num=ADC_num|ADRESL;
  2102  0297  1683               	bsf	3,5	;RP0=1, select bank1
  2103  0298  081E               	movf	30,w	;volatile
  2104  0299  1283               	bcf	3,5	;RP0=0, select bank0
  2105  029A  04A2               	iorwf	GetADCValue@ADC_num,f
  2106                           
  2107                           ;MyADC.c: 46: GO_DONE=1;
  2108  029B  149F               	bsf	31,1
  2109  029C                     l2191:	
  2110                           
  2111                           ;MyADC.c: 47: }
  2112                           ;MyADC.c: 48: return ADC_num;
  2113  029C  0823               	movf	GetADCValue@ADC_num+1,w
  2114  029D  00A1               	movwf	?_GetADCValue+1
  2115  029E  0822               	movf	GetADCValue@ADC_num,w
  2116  029F  00A0               	movwf	?_GetADCValue
  2117  02A0  0008               	return
  2118  02A1                     __end_of_GetADCValue:	
  2119                           
  2120                           	psect	text539
  2121  0300                     __ptext539:	
  2122 ;; =============== function _GetADCValue ends ============
  2123                           
  2124                           
  2125 ;; *************** function _isKeyPressed *****************
  2126 ;; Defined at:
  2127 ;;		line 18 in file "MyKey.c"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;		None
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;		None
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  1    wreg      unsigned char 
  2134 ;; Registers used:
  2135 ;;		wreg, status,2, status,0
  2136 ;; Tracked objects:
  2137 ;;		On entry : 60/0
  2138 ;;		On exit  : 60/0
  2139 ;;		Unchanged: FFF9F/0
  2140 ;; Data sizes:     COMMON   BANK0   BANK1
  2141 ;;      Params:         0       0       0
  2142 ;;      Locals:         0       0       0
  2143 ;;      Temps:          0       0       0
  2144 ;;      Totals:         0       0       0
  2145 ;;Total ram usage:        0 bytes
  2146 ;; Hardware stack levels used:    1
  2147 ;; Hardware stack levels required when called:    2
  2148 ;; This function calls:
  2149 ;;		Nothing
  2150 ;; This function is called by:
  2151 ;;		_Control
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154  0300                     _isKeyPressed:	
  2155                           
  2156                           ;MyKey.c: 19: return PC1 ? 0:1;
  2157                           
  2158                           ; Regs used in _isKeyPressed: [wreg+status,2+status,0]
  2159  0300  1003               	clrc
  2160  0301  1C87               	btfss	7,1
  2161  0302  1403               	setc
  2162  0303  3000               	movlw	0
  2163  0304  1803               	skipnc
  2164  0305  3001               	movlw	1
  2165  0306  0008               	return
  2166  0307                     __end_of_isKeyPressed:	
  2167                           
  2168                           	psect	text540
  2169  02B3                     __ptext540:	
  2170 ;; =============== function _isKeyPressed ends ============
  2171                           
  2172                           
  2173 ;; *************** function _Timer2_Init *****************
  2174 ;; Defined at:
  2175 ;;		line 80 in file "MyTIMMER.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;		None               void
  2182 ;; Registers used:
  2183 ;;		wreg, status,2
  2184 ;; Tracked objects:
  2185 ;;		On entry : 17F/0
  2186 ;;		On exit  : 17F/0
  2187 ;;		Unchanged: FFE80/0
  2188 ;; Data sizes:     COMMON   BANK0   BANK1
  2189 ;;      Params:         0       0       0
  2190 ;;      Locals:         0       0       0
  2191 ;;      Temps:          0       0       0
  2192 ;;      Totals:         0       0       0
  2193 ;;Total ram usage:        0 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    2
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_main
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202  02B3                     _Timer2_Init:	
  2203                           
  2204                           ;MyTIMMER.c: 82: TOUTPS0=0;TOUTPS1=0;TOUTPS2=0;TOUTPS3=0;
  2205                           
  2206                           ; Regs used in _Timer2_Init: [wreg+status,2]
  2207  02B3  1192               	bcf	18,3
  2208  02B4  1212               	bcf	18,4
  2209  02B5  1292               	bcf	18,5
  2210  02B6  1312               	bcf	18,6
  2211                           
  2212                           ;MyTIMMER.c: 83: T2CKPS0=1;T2CKPS1=0;
  2213  02B7  1412               	bsf	18,0
  2214  02B8  1092               	bcf	18,1
  2215                           
  2216                           ;MyTIMMER.c: 85: TMR2=0;
  2217  02B9  0191               	clrf	17	;volatile
  2218                           
  2219                           ;MyTIMMER.c: 86: PR2=12;
  2220  02BA  300C               	movlw	12
  2221  02BB  1683               	bsf	3,5	;RP0=1, select bank1
  2222  02BC  0092               	movwf	18	;volatile
  2223                           
  2224                           ;MyTIMMER.c: 89: PEIE=1;
  2225  02BD  170B               	bsf	11,6
  2226                           
  2227                           ;MyTIMMER.c: 90: TMR2IE=1;
  2228  02BE  148C               	bsf	12,1
  2229                           
  2230                           ;MyTIMMER.c: 91: TMR2IF=0;
  2231  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  2232  02C0  108C               	bcf	12,1
  2233                           
  2234                           ;MyTIMMER.c: 92: GIE=1;
  2235  02C1  178B               	bsf	11,7
  2236                           
  2237                           ;MyTIMMER.c: 93: TMR2ON=1;
  2238  02C2  1512               	bsf	18,2
  2239  02C3  0008               	return
  2240  02C4                     __end_of_Timer2_Init:	
  2241                           
  2242                           	psect	text541
  2243  027A                     __ptext541:	
  2244 ;; =============== function _Timer2_Init ends ============
  2245                           
  2246                           
  2247 ;; *************** function _Timer1_Init *****************
  2248 ;; Defined at:
  2249 ;;		line 56 in file "MyTIMMER.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;		None
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;		None
  2254 ;; Return value:  Size  Location     Type
  2255 ;;		None               void
  2256 ;; Registers used:
  2257 ;;		wreg, status,2
  2258 ;; Tracked objects:
  2259 ;;		On entry : 17F/20
  2260 ;;		On exit  : 17F/0
  2261 ;;		Unchanged: FFE80/0
  2262 ;; Data sizes:     COMMON   BANK0   BANK1
  2263 ;;      Params:         0       0       0
  2264 ;;      Locals:         0       0       0
  2265 ;;      Temps:          0       0       0
  2266 ;;      Totals:         0       0       0
  2267 ;;Total ram usage:        0 bytes
  2268 ;; Hardware stack levels used:    1
  2269 ;; Hardware stack levels required when called:    2
  2270 ;; This function calls:
  2271 ;;		Nothing
  2272 ;; This function is called by:
  2273 ;;		_main
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276  027A                     _Timer1_Init:	
  2277  027A  3005               	movlw	5
  2278                           
  2279                           ;MyTIMMER.c: 58: T1CKPS1 = 0;T1CKPS0 = 1;
  2280                           
  2281                           ; Regs used in _Timer1_Init: [wreg+status,2]
  2282  027B  1283               	bcf	3,5	;RP0=0, select bank0
  2283  027C  1290               	bcf	16,5
  2284  027D  1610               	bsf	16,4
  2285                           
  2286                           ;MyTIMMER.c: 59: T1OSCEN = 0;
  2287  027E  1190               	bcf	16,3
  2288                           
  2289                           ;MyTIMMER.c: 60: CCP1CON = 0x05;
  2290  027F  0095               	movwf	21	;volatile
  2291                           
  2292                           ;MyTIMMER.c: 61: TMR1CS = 0X00;
  2293  0280  1090               	bcf	16,1
  2294                           
  2295                           ;MyTIMMER.c: 63: PEIE = 1;
  2296  0281  170B               	bsf	11,6
  2297                           
  2298                           ;MyTIMMER.c: 64: CCP1IE=1;
  2299  0282  1683               	bsf	3,5	;RP0=1, select bank1
  2300  0283  140D               	bsf	13,0
  2301                           
  2302                           ;MyTIMMER.c: 65: CCP1IF=0;
  2303  0284  1283               	bcf	3,5	;RP0=0, select bank0
  2304  0285  100D               	bcf	13,0
  2305                           
  2306                           ;MyTIMMER.c: 66: TRISC5 = 1;
  2307  0286  1683               	bsf	3,5	;RP0=1, select bank1
  2308  0287  1687               	bsf	7,5
  2309                           
  2310                           ;MyTIMMER.c: 67: TMR1H=0;
  2311  0288  1283               	bcf	3,5	;RP0=0, select bank0
  2312  0289  018F               	clrf	15	;volatile
  2313                           
  2314                           ;MyTIMMER.c: 68: TMR1L=0;
  2315  028A  018E               	clrf	14	;volatile
  2316                           
  2317                           ;MyTIMMER.c: 69: GIE=1;
  2318  028B  178B               	bsf	11,7
  2319                           
  2320                           ;MyTIMMER.c: 70: TMR1ON = 0;
  2321  028C  1010               	bcf	16,0
  2322  028D  0008               	return
  2323  028E                     __end_of_Timer1_Init:	
  2324                           
  2325                           	psect	text542
  2326  0180                     __ptext542:	
  2327 ;; =============== function _Timer1_Init ends ============
  2328                           
  2329                           
  2330 ;; *************** function _GPIO_Init *****************
  2331 ;; Defined at:
  2332 ;;		line 34 in file "MyConfiguration.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;		None
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;		None
  2337 ;; Return value:  Size  Location     Type
  2338 ;;		None               void
  2339 ;; Registers used:
  2340 ;;		None
  2341 ;; Tracked objects:
  2342 ;;		On entry : 17F/0
  2343 ;;		On exit  : 17F/20
  2344 ;;		Unchanged: FFE80/0
  2345 ;; Data sizes:     COMMON   BANK0   BANK1
  2346 ;;      Params:         0       0       0
  2347 ;;      Locals:         0       0       0
  2348 ;;      Temps:          0       0       0
  2349 ;;      Totals:         0       0       0
  2350 ;;Total ram usage:        0 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    2
  2353 ;; This function calls:
  2354 ;;		Nothing
  2355 ;; This function is called by:
  2356 ;;		_main
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359  0180                     _GPIO_Init:	
  2360                           
  2361                           ;MyConfiguration.c: 36: TRISA0=0;
  2362                           
  2363                           ; Regs used in _GPIO_Init: []
  2364  0180  1683               	bsf	3,5	;RP0=1, select bank1
  2365  0181  1005               	bcf	5,0
  2366                           
  2367                           ;MyConfiguration.c: 37: TRISA1=0;
  2368  0182  1085               	bcf	5,1
  2369                           
  2370                           ;MyConfiguration.c: 38: TRISA2=0;
  2371  0183  1105               	bcf	5,2
  2372                           
  2373                           ;MyConfiguration.c: 39: TRISA3=0;
  2374  0184  1185               	bcf	5,3
  2375                           
  2376                           ;MyConfiguration.c: 40: TRISA4=0;
  2377  0185  1205               	bcf	5,4
  2378                           
  2379                           ;MyConfiguration.c: 41: TRISA5=0;
  2380  0186  1285               	bcf	5,5
  2381                           
  2382                           ;MyConfiguration.c: 42: TRISA6=0;
  2383  0187  1305               	bcf	5,6
  2384                           
  2385                           ;MyConfiguration.c: 43: TRISA7=0;
  2386  0188  1385               	bcf	5,7
  2387                           
  2388                           ;MyConfiguration.c: 45: TRISC0=0;
  2389  0189  1007               	bcf	7,0
  2390                           
  2391                           ;MyConfiguration.c: 46: TRISC1=1;
  2392  018A  1487               	bsf	7,1
  2393                           
  2394                           ;MyConfiguration.c: 47: TRISC2=0;
  2395  018B  1107               	bcf	7,2
  2396                           
  2397                           ;MyConfiguration.c: 48: TRISC3=0;
  2398  018C  1187               	bcf	7,3
  2399                           
  2400                           ;MyConfiguration.c: 49: TRISC4=0;
  2401  018D  1207               	bcf	7,4
  2402                           
  2403                           ;MyConfiguration.c: 50: TRISC5=0;
  2404  018E  1287               	bcf	7,5
  2405                           
  2406                           ;MyConfiguration.c: 52: CM0=1;CM1=1;CM2=1;
  2407  018F  1283               	bcf	3,5	;RP0=0, select bank0
  2408  0190  1419               	bsf	25,0
  2409  0191  1499               	bsf	25,1
  2410  0192  1519               	bsf	25,2
  2411                           
  2412                           ;MyConfiguration.c: 56: ANSEL0=0;ANSEL1=0;ANSEL2=0;ANSEL3=0;ANSEL4=0;ANSEL5=0;ANSEL6=0;A
      +                          NSEL7=0;
  2413  0193  1683               	bsf	3,5	;RP0=1, select bank1
  2414  0194  1011               	bcf	17,0
  2415  0195  1091               	bcf	17,1
  2416  0196  1111               	bcf	17,2
  2417  0197  1191               	bcf	17,3
  2418  0198  1211               	bcf	17,4
  2419  0199  1291               	bcf	17,5
  2420  019A  1311               	bcf	17,6
  2421  019B  1391               	bcf	17,7
  2422                           
  2423                           ;MyConfiguration.c: 58: WPUA0=1;WPUA1=1;WPUA2=1;WPUA3=1;WPUA4=1;WPUA5=1;WPUA6=1;WPUA7=1;
  2424  019C  1415               	bsf	21,0
  2425  019D  1495               	bsf	21,1
  2426  019E  1515               	bsf	21,2
  2427  019F  1595               	bsf	21,3
  2428  01A0  1615               	bsf	21,4
  2429  01A1  1695               	bsf	21,5
  2430  01A2  1715               	bsf	21,6
  2431  01A3  1795               	bsf	21,7
  2432                           
  2433                           ;MyConfiguration.c: 60: WPUC0=0;WPUC1=1;WPUC2=1;WPUC3=0;WPUC4=0;WPUC5=0;
  2434  01A4  1008               	bcf	8,0
  2435  01A5  1488               	bsf	8,1
  2436  01A6  1508               	bsf	8,2
  2437  01A7  1188               	bcf	8,3
  2438  01A8  1208               	bcf	8,4
  2439  01A9  1288               	bcf	8,5
  2440                           
  2441                           ;MyConfiguration.c: 62: WPDA4=0;WPDC1=0;WPDC2=0;WPDC3=0;
  2442  01AA  1209               	bcf	9,4
  2443  01AB  1189               	bcf	9,3
  2444  01AC  1109               	bcf	9,2
  2445  01AD  1089               	bcf	9,1
  2446  01AE  0008               	return
  2447  01AF                     __end_of_GPIO_Init:	
  2448                           
  2449                           	psect	text543
  2450  02F8                     __ptext543:	
  2451 ;; =============== function _GPIO_Init ends ============
  2452                           
  2453                           
  2454 ;; *************** function _System_init *****************
  2455 ;; Defined at:
  2456 ;;		line 21 in file "MyConfiguration.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;		None               void
  2463 ;; Registers used:
  2464 ;;		wreg, status,2
  2465 ;; Tracked objects:
  2466 ;;		On entry : 17F/0
  2467 ;;		On exit  : 17F/0
  2468 ;;		Unchanged: FFE80/0
  2469 ;; Data sizes:     COMMON   BANK0   BANK1
  2470 ;;      Params:         0       0       0
  2471 ;;      Locals:         0       0       0
  2472 ;;      Temps:          0       0       0
  2473 ;;      Totals:         0       0       0
  2474 ;;Total ram usage:        0 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    2
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_main
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483  02F8                     _System_init:	
  2484                           
  2485                           ;MyConfiguration.c: 22: OPTION = 0x00;
  2486                           
  2487                           ; Regs used in _System_init: [wreg+status,2]
  2488  02F8  1683               	bsf	3,5	;RP0=1, select bank1
  2489  02F9  0181               	clrf	1	;volatile
  2490                           
  2491                           ;MyConfiguration.c: 23: OSCCON = 0x70;
  2492  02FA  3070               	movlw	112
  2493  02FB  008F               	movwf	15	;volatile
  2494                           
  2495                           ;MyConfiguration.c: 24: WDTCON = 0x1E;
  2496  02FC  301E               	movlw	30
  2497  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  2498  02FE  0098               	movwf	24	;volatile
  2499  02FF  0008               	return
  2500  0300                     __end_of_System_init:	
  2501                           
  2502                           	psect	text544
  2503  0064                     __ptext544:	
  2504 ;; =============== function _System_init ends ============
  2505                           
  2506                           
  2507 ;; *************** function _ISR *****************
  2508 ;; Defined at:
  2509 ;;		line 24 in file "MyTIMMER.c"
  2510 ;; Parameters:    Size  Location     Type
  2511 ;;		None
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;		None
  2514 ;; Return value:  Size  Location     Type
  2515 ;;		None               void
  2516 ;; Registers used:
  2517 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 40/0
  2521 ;;		Unchanged: FFF9F/0
  2522 ;; Data sizes:     COMMON   BANK0   BANK1
  2523 ;;      Params:         0       0       0
  2524 ;;      Locals:         0       0       0
  2525 ;;      Temps:          3       0       0
  2526 ;;      Totals:         3       0       0
  2527 ;;Total ram usage:        3 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    1
  2530 ;; This function calls:
  2531 ;;		_GetCCP1Value
  2532 ;;		_VS1838ReceiveHandle
  2533 ;;		_Clean_countReg
  2534 ;; This function is called by:
  2535 ;;		Interrupt level 1
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538  0064                     _ISR:	
  2539  0064  3001               	movlw	1
  2540                           
  2541                           ;MyTIMMER.c: 25: Cycle_CCPR=0;
  2542  0065  1283               	bcf	3,5	;RP0=0, select bank0
  2543  0066  1303               	bcf	3,6	;RP1=0, select bank0
  2544  0067  01BC               	clrf	_Cycle_CCPR
  2545  0068  01BD               	clrf	_Cycle_CCPR+1
  2546                           
  2547                           ;MyTIMMER.c: 26: if(CCP1IE&CCP1IF == 1)
  2548  0069  1683               	bsf	3,5	;RP0=1, select bank1
  2549  006A  1C0D               	btfss	13,0
  2550  006B  3900               	andlw	0
  2551  006C  1283               	bcf	3,5	;RP0=0, select bank0
  2552  006D  1C0D               	btfss	13,0
  2553  006E  3900               	andlw	0
  2554  006F  3800               	iorlw	0
  2555  0070  1903               	skipnz
  2556  0071  287F               	goto	i1l7641
  2557                           
  2558                           ;MyTIMMER.c: 27: {
  2559                           ;MyTIMMER.c: 28: CCP1IF = 0;
  2560  0072  100D               	bcf	13,0
  2561                           
  2562                           ;MyTIMMER.c: 29: Cycle_CCPR = GetCCP1Value();
  2563  0073  22D0               	fcall	_GetCCP1Value
  2564  0074  0871               	movf	?_GetCCP1Value+1,w
  2565  0075  00BD               	movwf	_Cycle_CCPR+1
  2566  0076  0870               	movf	?_GetCCP1Value,w
  2567  0077  00BC               	movwf	_Cycle_CCPR
  2568                           
  2569                           ;MyTIMMER.c: 30: VS1838ReceiveHandle(Cycle_CCPR);
  2570  0078  083D               	movf	_Cycle_CCPR+1,w
  2571  0079  00F1               	movwf	?_VS1838ReceiveHandle+1
  2572  007A  083C               	movf	_Cycle_CCPR,w
  2573  007B  00F0               	movwf	?_VS1838ReceiveHandle
  2574  007C  200D               	fcall	_VS1838ReceiveHandle
  2575                           
  2576                           ;MyTIMMER.c: 31: Clean_countReg();
  2577  007D  230D               	fcall	_Clean_countReg
  2578                           
  2579                           ;MyTIMMER.c: 32: }else if(TMR2IE&&TMR2IF){
  2580  007E  28A2               	goto	i1l7647
  2581  007F                     i1l7641:	
  2582  007F  1683               	bsf	3,5	;RP0=1, select bank1
  2583  0080  1C8C               	btfss	12,1
  2584  0081  28A2               	goto	i1l7647
  2585  0082  1283               	bcf	3,5	;RP0=0, select bank0
  2586  0083  1C8C               	btfss	12,1
  2587  0084  28A2               	goto	i1l7647
  2588                           
  2589                           ;MyTIMMER.c: 33: TMR2IF=0;
  2590  0085  108C               	bcf	12,1
  2591                           
  2592                           ;MyTIMMER.c: 34: count++;
  2593  0086  0ABE               	incf	_count,f
  2594  0087  1903               	skipnz
  2595  0088  0ABF               	incf	_count+1,f
  2596                           
  2597                           ;MyTIMMER.c: 35: if(count >= num){
  2598  0089  0878               	movf	_num+1,w
  2599  008A  023F               	subwf	_count+1,w
  2600  008B  1D03               	skipz
  2601  008C  288F               	goto	u46_25
  2602  008D  0877               	movf	_num,w
  2603  008E  023E               	subwf	_count,w
  2604  008F                     u46_25:	
  2605  008F  1C03               	skipc
  2606  0090  2899               	goto	i1l10306
  2607  0091  3000               	movlw	0
  2608                           
  2609                           ;MyTIMMER.c: 36: TMR2ON = 0;
  2610  0092  1112               	bcf	18,2
  2611  0093  01BE               	clrf	_count
  2612  0094  01BF               	clrf	_count+1
  2613  0095  1003               	clrc
  2614  0096  1803               	skipnc
  2615  0097  3001               	movlw	1
  2616  0098  00C1               	movwf	_flag_senf
  2617  0099                     i1l10306:	
  2618                           
  2619                           ;MyTIMMER.c: 38: }
  2620                           ;MyTIMMER.c: 39: if(send_flag ==0){
  2621  0099  08FB               	movf	_send_flag,f
  2622  009A  1D03               	skipz
  2623  009B  28A0               	goto	i1l10310
  2624                           
  2625                           ;MyTIMMER.c: 40: send_flag=1;
  2626  009C  01FB               	clrf	_send_flag
  2627  009D  0AFB               	incf	_send_flag,f
  2628                           
  2629                           ;MyTIMMER.c: 41: PC2 = 1;
  2630  009E  1507               	bsf	7,2
  2631                           
  2632                           ;MyTIMMER.c: 42: }else{
  2633  009F  28A2               	goto	i1l7647
  2634  00A0                     i1l10310:	
  2635                           
  2636                           ;MyTIMMER.c: 43: send_flag=0;
  2637  00A0  01FB               	clrf	_send_flag
  2638                           
  2639                           ;MyTIMMER.c: 44: PC2 = 0;
  2640  00A1  1107               	bcf	7,2
  2641  00A2                     i1l7647:	
  2642  00A2  0876               	movf	??_ISR+2,w
  2643  00A3  008A               	movwf	10
  2644  00A4  0875               	movf	??_ISR+1,w
  2645  00A5  0084               	movwf	4
  2646  00A6  0E74               	swapf	??_ISR^(0+-128),w
  2647  00A7  0083               	movwf	3
  2648  00A8  0EFE               	swapf	126,f
  2649  00A9  0E7E               	swapf	126,w
  2650  00AA  0009               	retfie
  2651  00AB                     __end_of_ISR:	
  2652                           
  2653                           	psect	intentry
  2654  0004                     __pintentry:	
  2655                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2656                           
  2657  0004                     interrupt_function:	
  2658  007E                     saved_w	set	btemp
  2659  0004  00FE               	movwf	btemp
  2660  0005  0E03               	swapf	3,w
  2661  0006  00F4               	movwf	??_ISR
  2662  0007  0804               	movf	4,w
  2663  0008  00F5               	movwf	??_ISR+1
  2664  0009  080A               	movf	10,w
  2665  000A  00F6               	movwf	??_ISR+2
  2666  000B  2864               	ljmp	_ISR
  2667                           
  2668                           	psect	text545
  2669  030D                     __ptext545:	
  2670 ;; =============== function _ISR ends ============
  2671                           
  2672                           
  2673 ;; *************** function _Clean_countReg *****************
  2674 ;; Defined at:
  2675 ;;		line 107 in file "MyTIMMER.c"
  2676 ;; Parameters:    Size  Location     Type
  2677 ;;		None
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;		None
  2680 ;; Return value:  Size  Location     Type
  2681 ;;		None               void
  2682 ;; Registers used:
  2683 ;;		status,2
  2684 ;; Tracked objects:
  2685 ;;		On entry : 60/0
  2686 ;;		On exit  : 60/0
  2687 ;;		Unchanged: FFF9F/0
  2688 ;; Data sizes:     COMMON   BANK0   BANK1
  2689 ;;      Params:         0       0       0
  2690 ;;      Locals:         0       0       0
  2691 ;;      Temps:          0       0       0
  2692 ;;      Totals:         0       0       0
  2693 ;;Total ram usage:        0 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; This function calls:
  2696 ;;		Nothing
  2697 ;; This function is called by:
  2698 ;;		_ISR
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701  030D                     _Clean_countReg:	
  2702                           
  2703                           ;MyTIMMER.c: 108: TMR1H=0;
  2704                           
  2705                           ; Regs used in _Clean_countReg: [status,2]
  2706  030D  018F               	clrf	15	;volatile
  2707                           
  2708                           ;MyTIMMER.c: 109: TMR1L=0;
  2709  030E  018E               	clrf	14	;volatile
  2710  030F  0008               	return
  2711  0310                     __end_of_Clean_countReg:	
  2712                           
  2713                           	psect	text546
  2714  02D0                     __ptext546:	
  2715 ;; =============== function _Clean_countReg ends ============
  2716                           
  2717                           
  2718 ;; *************** function _GetCCP1Value *****************
  2719 ;; Defined at:
  2720 ;;		line 97 in file "MyTIMMER.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;		None
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;  values          2    2[COMMON] unsigned int 
  2725 ;; Return value:  Size  Location     Type
  2726 ;;                  2    0[COMMON] unsigned int 
  2727 ;; Registers used:
  2728 ;;		wreg, status,2
  2729 ;; Tracked objects:
  2730 ;;		On entry : 60/0
  2731 ;;		On exit  : 60/0
  2732 ;;		Unchanged: FFF9F/0
  2733 ;; Data sizes:     COMMON   BANK0   BANK1
  2734 ;;      Params:         2       0       0
  2735 ;;      Locals:         2       0       0
  2736 ;;      Temps:          0       0       0
  2737 ;;      Totals:         4       0       0
  2738 ;;Total ram usage:        4 bytes
  2739 ;; Hardware stack levels used:    1
  2740 ;; This function calls:
  2741 ;;		Nothing
  2742 ;; This function is called by:
  2743 ;;		_ISR
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746  02D0                     _GetCCP1Value:	
  2747                           
  2748                           ;MyTIMMER.c: 100: values = CCPR1H;
  2749                           
  2750                           ; Regs used in _GetCCP1Value: [wreg+status,2]
  2751  02D0  0814               	movf	20,w	;volatile
  2752  02D1  00F2               	movwf	GetCCP1Value@values
  2753  02D2  01F3               	clrf	GetCCP1Value@values+1
  2754                           
  2755                           ;MyTIMMER.c: 101: values = values<<8;
  2756  02D3  00F3               	movwf	GetCCP1Value@values+1
  2757  02D4  01F2               	clrf	GetCCP1Value@values
  2758                           
  2759                           ;MyTIMMER.c: 102: values = values|CCPR1L;
  2760  02D5  0813               	movf	19,w	;volatile
  2761  02D6  04F2               	iorwf	GetCCP1Value@values,f
  2762                           
  2763                           ;MyTIMMER.c: 103: return values;
  2764  02D7  0873               	movf	GetCCP1Value@values+1,w
  2765  02D8  00F1               	movwf	?_GetCCP1Value+1
  2766  02D9  0872               	movf	GetCCP1Value@values,w
  2767  02DA  00F0               	movwf	?_GetCCP1Value
  2768  02DB  0008               	return
  2769  02DC                     __end_of_GetCCP1Value:	
  2770                           
  2771                           	psect	text547
  2772  000D                     __ptext547:	
  2773 ;; =============== function _GetCCP1Value ends ============
  2774                           
  2775                           
  2776 ;; *************** function _VS1838ReceiveHandle *****************
  2777 ;; Defined at:
  2778 ;;		line 25 in file "MyIR.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;  capdata         2    0[COMMON] unsigned int 
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;		None               void
  2785 ;; Registers used:
  2786 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2787 ;; Tracked objects:
  2788 ;;		On entry : 60/0
  2789 ;;		On exit  : 60/0
  2790 ;;		Unchanged: FFF9F/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1
  2792 ;;      Params:         2       0       0
  2793 ;;      Locals:         0       0       0
  2794 ;;      Temps:          0       0       0
  2795 ;;      Totals:         2       0       0
  2796 ;;Total ram usage:        2 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_ISR
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804  000D                     _VS1838ReceiveHandle:	
  2805                           
  2806                           ;MyIR.c: 26: switch(VS1838_Status)
  2807                           
  2808                           ; Regs used in _VS1838ReceiveHandle: [wreg-fsr0h+status,2+status,0]
  2809  000D  285B               	goto	i1l10280
  2810  000E                     i1l10246:	
  2811                           
  2812                           ;MyIR.c: 29: if((capdata >= 8500)&&(capdata <= 12500))
  2813  000E  3021               	movlw	33
  2814  000F  0271               	subwf	VS1838ReceiveHandle@capdata+1,w
  2815  0010  3034               	movlw	52
  2816  0011  1903               	skipnz
  2817  0012  0270               	subwf	VS1838ReceiveHandle@capdata,w
  2818  0013  1C03               	skipc
  2819  0014  281F               	goto	i1l10252
  2820  0015  3030               	movlw	48
  2821  0016  0271               	subwf	VS1838ReceiveHandle@capdata+1,w
  2822  0017  30D5               	movlw	213
  2823  0018  1903               	skipnz
  2824  0019  0270               	subwf	VS1838ReceiveHandle@capdata,w
  2825                           
  2826                           ;MyIR.c: 30: {
  2827                           ;MyIR.c: 31: VS1838_Status = 1;
  2828  001A  01FA               	clrf	_VS1838_Status
  2829  001B  1803               	skipnc
  2830  001C  2820               	goto	L5
  2831  001D  0AFA               	incf	_VS1838_Status,f
  2832                           
  2833                           ;MyIR.c: 32: } else
  2834  001E  0008               	return
  2835  001F                     i1l10252:	
  2836                           
  2837                           ;MyIR.c: 33: {
  2838                           ;MyIR.c: 34: VS1838_Status = 0;
  2839  001F  01FA               	clrf	_VS1838_Status
  2840  0020                     L5:	
  2841                           
  2842                           ;MyIR.c: 35: VS1838_Receive_Count = 0;
  2843  0020  01F9               	clrf	_VS1838_Receive_Count
  2844  0021  0008               	return
  2845  0022                     i1l10254:	
  2846                           
  2847                           ;MyIR.c: 39: if((capdata>=2000)&&(capdata<=2500))
  2848  0022  3007               	movlw	7
  2849  0023  0271               	subwf	VS1838ReceiveHandle@capdata+1,w
  2850  0024  30D0               	movlw	208
  2851  0025  1903               	skipnz
  2852  0026  0270               	subwf	VS1838ReceiveHandle@capdata,w
  2853  0027  1C03               	skipc
  2854  0028  2836               	goto	i1l10260
  2855  0029  3009               	movlw	9
  2856  002A  0271               	subwf	VS1838ReceiveHandle@capdata+1,w
  2857  002B  30C5               	movlw	197
  2858  002C  1903               	skipnz
  2859  002D  0270               	subwf	VS1838ReceiveHandle@capdata,w
  2860  002E  1803               	skipnc
  2861  002F  2836               	goto	i1l10260
  2862                           
  2863                           ;MyIR.c: 40: {
  2864                           ;MyIR.c: 41: VS838_Receive_Data=VS838_Receive_Data<<1;
  2865  0030  1003               	clrc
  2866  0031  0DB6               	rlf	_VS838_Receive_Data,f
  2867  0032  0DB7               	rlf	_VS838_Receive_Data+1,f
  2868  0033  0DB8               	rlf	_VS838_Receive_Data+2,f
  2869  0034  0DB9               	rlf	_VS838_Receive_Data+3,f
  2870  0035  284A               	goto	L4
  2871  0036                     i1l10260:	
  2872                           ;MyIR.c: 43: }
  2873                           
  2874                           ;MyIR.c: 42: VS1838_Receive_Count++;
  2875                           
  2876                           
  2877                           ;MyIR.c: 44: else
  2878                           ;MyIR.c: 45: if((capdata >= 4000)&&(capdata <= 5000))
  2879  0036  300F               	movlw	15
  2880  0037  0271               	subwf	VS1838ReceiveHandle@capdata+1,w
  2881  0038  30A0               	movlw	160
  2882  0039  1903               	skipnz
  2883  003A  0270               	subwf	VS1838ReceiveHandle@capdata,w
  2884  003B  1C03               	skipc
  2885  003C  284C               	goto	i1l10268
  2886  003D  3013               	movlw	19
  2887  003E  0271               	subwf	VS1838ReceiveHandle@capdata+1,w
  2888  003F  3089               	movlw	137
  2889  0040  1903               	skipnz
  2890  0041  0270               	subwf	VS1838ReceiveHandle@capdata,w
  2891  0042  1803               	skipnc
  2892  0043  284C               	goto	i1l10268
  2893                           
  2894                           ;MyIR.c: 46: {
  2895                           ;MyIR.c: 47: VS838_Receive_Data=VS838_Receive_Data<<1;
  2896  0044  1003               	clrc
  2897  0045  0DB6               	rlf	_VS838_Receive_Data,f
  2898  0046  0DB7               	rlf	_VS838_Receive_Data+1,f
  2899  0047  0DB8               	rlf	_VS838_Receive_Data+2,f
  2900  0048  0DB9               	rlf	_VS838_Receive_Data+3,f
  2901                           
  2902                           ;MyIR.c: 48: VS838_Receive_Data=VS838_Receive_Data|0x0001;
  2903  0049  1436               	bsf	_VS838_Receive_Data,0
  2904  004A                     L4:	
  2905                           
  2906                           ;MyIR.c: 49: VS1838_Receive_Count++;
  2907  004A  0AF9               	incf	_VS1838_Receive_Count,f
  2908                           
  2909                           ;MyIR.c: 50: }
  2910  004B  2852               	goto	i1l10274
  2911  004C                     i1l10268:	
  2912                           
  2913                           ;MyIR.c: 51: else
  2914                           ;MyIR.c: 52: {
  2915                           ;MyIR.c: 53: VS1838_Status = 0;
  2916  004C  01FA               	clrf	_VS1838_Status
  2917                           
  2918                           ;MyIR.c: 54: VS838_Receive_Data = 0;
  2919  004D  01B6               	clrf	_VS838_Receive_Data
  2920  004E  01B7               	clrf	_VS838_Receive_Data+1
  2921  004F  01B8               	clrf	_VS838_Receive_Data+2
  2922  0050  01B9               	clrf	_VS838_Receive_Data+3
  2923                           
  2924                           ;MyIR.c: 55: VS1838_Receive_Count = 0;
  2925  0051  01F9               	clrf	_VS1838_Receive_Count
  2926  0052                     i1l10274:	
  2927  0052  0879               	movf	_VS1838_Receive_Count,w
  2928  0053  3A20               	xorlw	32
  2929  0054  1D03               	btfss	3,2
  2930  0055  0008               	return
  2931                           
  2932                           ;MyIR.c: 59: {
  2933                           ;MyIR.c: 60: VS1838_receive_ok = 1;
  2934  0056  01C0               	clrf	_VS1838_receive_ok
  2935  0057  0AC0               	incf	_VS1838_receive_ok,f
  2936  0058  281F               	goto	i1l10252
  2937  0059                     i1l10276:	
  2938                           
  2939                           ;MyIR.c: 67: {
  2940                           ;MyIR.c: 69: VS1838_Status=0;
  2941  0059  01FA               	clrf	_VS1838_Status
  2942                           
  2943                           ;MyIR.c: 70: }
  2944                           ;MyIR.c: 71: break;
  2945  005A  0008               	return
  2946  005B                     i1l10280:	
  2947  005B  087A               	movf	_VS1838_Status,w
  2948                           
  2949                           ; Switch size 1, requested type "space"
  2950                           ; Number of cases is 2, Range of values is 0 to 1
  2951                           ; switch strategies available:
  2952                           ; Name         Instructions Cycles
  2953                           ; simple_byte            7     4 (average)
  2954                           ; direct_byte            8     6 (fixed)
  2955                           ; jumptable            260     6 (fixed)
  2956                           ; rangetable             6     6 (fixed)
  2957                           ; spacedrange           10     9 (fixed)
  2958                           ; locatedrange           2     3 (fixed)
  2959                           ;	Chosen strategy is simple_byte
  2960  005C  3A00               	xorlw	0	; case 0
  2961  005D  1903               	skipnz
  2962  005E  280E               	goto	i1l10246
  2963  005F  3A01               	xorlw	1	; case 1
  2964  0060  1903               	skipnz
  2965  0061  2822               	goto	i1l10254
  2966  0062  2859               	goto	i1l10276
  2967  0063  0008               	return
  2968  0064                     __end_of_VS1838ReceiveHandle:	
  2969                           
  2970                           	psect	text548
  2971  0000                     __ptext548:	
  2972 ;; =============== function _VS1838ReceiveHandle ends ============
  2973                           
  2974  007E                     btemp	set	126	;btemp
  2975  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Wed May 23 16:41:44 2018

                          _RD 04E0                            _WR 04E8                            fsr 0004  
      __end_of_Clean_countReg 0310          Read_IRData@Address_H 002A          Read_IRData@Address_L 002B  
                         _CM0 00C8                           _CM1 00C9                           _CM2 00CA  
                         _GIE 005F                           _PC1 0039                           _PC2 003A  
                         _PC3 003B                           _PR2 0092                           u505 01C6  
                         _ISR 0064                           _SR0 0CF6                           _SR1 0CF7  
                         u555 023C                           u565 02A9                           u657 0242  
                         _num 0077                           fsr0 0004                           indf 0000  
      __size_of_LED_Study_End 0010                          ?_ISR 0070                          l1113 00BC  
                        l2191 029C                          l2192 0000                          l2188 0000  
                        l3262 0000                          l3271 0000                          l3280 0000  
                        l3265 0000                          l3277 0000                          l4361 0212  
                        l4363 0218                          l4364 0000                          l4349 0000  
                        l4358 01FF                          l4367 0000                          l5491 0159  
                        l5485 0000                          l5479 0000                          l5495 0000  
                        l6560 0000                          l5488 0000                          _ADFM 00FF  
                        l7650 0000                          l7653 0000                          l9421 0000  
                        _ADON 00F8                          _CHS0 00FA                          _CHS1 00FB  
                        _CHS2 00FC                          _EEIF 0067                          _DIVS 04FF  
                        _PEIE 005E                          _TMR2 0011                          _STRA 0CE8  
                        _STRB 0CE9                          _STRC 0CEA                          _STRD 0CEB  
                        _WREN 0C62               __end_of_IR_SEND 0180                ??_isKeyPressed 0020  
            ??_VS1838_Process 0022                          _main 01D9                          btemp 007E  
            __end_of_ADC_Init 027A                   _GetADCValue 028E                          start 000C  
          __size_of_GPIO_Init 002F                 ??_Read_IRData 0026                _Read_EEPROM_u8 02C4  
       __size_of_GetCCP1Value 000C               __end_of_Control 00E2          __size_of_System_init 0008  
                       ??_ISR 0074               ?_Clean_countReg 0070                         l10200 0000  
                       l10202 0000                         l10204 0000                         l10212 0000  
                       l10206 0000                         l10214 0000                         l10222 0000  
                       l10230 0000                         l10208 0000                         l10224 0203  
                       l10240 0000                         l10232 0000                         l10400 0000  
                       l10162 0000                         l10170 0000                         l10218 0000  
                       l10226 0000                         l10234 0000                         l10330 0000  
                       l10402 0236                         l10410 0000                         l10164 0000  
                       l10180 0000                         l10172 0000                         l10228 0000  
                       l10236 0000                         l10340 0000                         l10404 02A1  
                       l10420 025F                         l10412 0000                         l10500 00C0  
                       l10166 0000                         l10190 0000                         l10182 0000  
                       l10174 0000                         l10238 0000                         l10350 01D4  
                       l10406 0000                         l10414 0000                         l10430 0000  
                       l10422 0000                         l10510 00DE                         l10502 0000  
                       l10168 0000                         l10184 0000                         l10176 0000  
                       l10192 0000                         l10344 0000                         l10328 0000  
                       l10360 0000                         l10408 02A3                         l10416 0000  
                       l10440 0000                         l10432 0000                         l10424 0000  
                       l10504 0000                         l10520 0000                         l10512 0000  
                       l10186 0000                         l10178 0000                         l10194 0000  
                       l10338 01BD                         l10354 0000                         l10362 0000  
                       l10370 0000                         l10418 0000                         l10434 0000  
                       l10426 0000                         l10450 0000                         l10442 0000  
                       l10530 0000                         l10522 0000                         l10514 0000  
                       l10188 0000                         l10196 0000                         l10348 0000  
                       l10364 0000                         l10356 0000                         l10380 0000  
                       l10372 0000                         l10436 0000                         l10428 0000  
                       l10452 0000                         l10444 0000                         l10460 0000  
                       l10524 0000                         l10516 0000           _VS1838ReceiveHandle 000D  
                       l10198 0000                         l10358 0000                         l10382 0000  
                       l10438 0000                         l10454 0000                         l10446 0000  
                       l10462 0000                         l10534 01FB                         l10526 0000  
                       l10518 0000                         l10384 0000                         l10376 0000  
                       l10368 0000                         l10448 0000                         l10456 0307  
                       l10472 0165                         l10464 0000                         l10528 0000  
                       l10386 0000                         l10458 0000                         l10490 0000  
                       l10482 0000                         l10388 0000                         l10396 0234  
                       l10476 0000                         l10492 00B6                         l10484 0000  
                       l10478 0000                         l10494 00BF                         l10488 0000  
                       _C1SEN 0CF5                         _C2REN 0CF4                         _ADCS0 04FC  
                       _ADCS1 04FD                         _ADCS2 04FE                         ?_main 0070  
                       _EEADR 009B                         _EEDAT 009A                         _EEPGD 0C67  
             __end_of___lwdiv 01D9                         _VCFG0 00FD                         _TMR1H 000F  
                       _TMR1L 000E                         _WPDA4 044C                         _WPDC1 044B  
                       _WPDC2 044A                         _SRCON 019E                         _WPDC3 0449  
                       u46_25 008F                         _PULSR 0CF2                         _PULSS 0CF3  
                       _WPUA0 04A8                         _WPUA1 04A9                         _WPUA2 04AA  
                       _WPUA3 04AB                         _WPUC0 0440                         _WPUA4 04AC  
                       _WPUC1 0441                         _WPUA5 04AD                         _WPUC2 0442  
                       _WPUA6 04AE                         _WPUC3 0443                         _WPUA7 04AF  
                       _WPUC4 0444                         _WPUC5 0445                         _count 003E  
                  _Cycle_CCPR 003C                         pclath 000A                  _GetCCP1Value 02D0  
        ?_VS1838ReceiveHandle 0070                         status 0003                         wtemp0 007E  
      __end_of_Read_EEPROM_u8 02D0             Read_IRData@Data_H 002C             Read_IRData@Data_L 002D  
        __size_of_EEPROM_Init 0009                 _LED_Study_End 021A            GetCCP1Value@values 0072  
                __end_of_main 01FD    VS1838ReceiveHandle@capdata 0070             Read_IRData@data_t 002E  
         __end_of_Read_IRData 014E            __size_of_Delay_xms 0019            __size_of_Delay_xus 0012  
                      ??_main 0032              __end_of_Send_Low 030D             __end_of_GPIO_Init 01AF  
                   ??_IR_SEND 002D                        _ADCON0 001F                        _CCP1IE 0468  
                      _CCP1IF 0068                        _ADRESH 001E                        _ADRESL 009E  
                      _CCPR1H 0014                        _CCPR1L 0013                        _EECON1 009C  
                      _ANSEL0 0488                        _ANSEL1 0489                        _ANSEL2 048A  
                      _ANSEL3 048B                        _ANSEL4 048C                        _ANSEL5 048D  
                      _ANSEL6 048E                        _ANSEL7 048F         ??_VS1838ReceiveHandle 0072  
                      i1l7641 007F                        i1l7647 00A2                        i1l7656 0000  
                      i1l7659 0000                        _OSCCON 008F                        _TMR1CS 0081  
                      _TMR2IE 0461                        _TMR2IF 0061                        _OPTION 0081  
                      _TMR1ON 0080                        _TMR2ON 0092                        _WDTCON 0018  
                      _TRISA0 0428                        _TRISA1 0429                        _TRISA2 042A  
                      _TRISA3 042B                        _TRISC0 0438                        _TRISA4 042C  
                      _TRISC1 0439                        _TRISA5 042D                        _TRISC2 043A  
                      _TRISA6 042E                        _TRISC3 043B                        _TRISA7 042F  
                      _TRISC4 043C                        _TRISC5 043D                     ??_Control 002E  
             ?_Read_EEPROM_u8 0070                ?_LED_Study_End 0070                 ??_Timer1_Init 0020  
               ??_Timer2_Init 0020            __size_of_Send_High 0017        Write_EEPROM_u8@EEDatas 0020  
                   ??___lwdiv 0024          __end_of_isKeyPressed 0307                        clrloop 02F1  
    __size_of_Write_EEPROM_u8 001D                     ?_ADC_Init 0070                        saved_w 007E  
           __end_of_Delay_xms 024D             __end_of_Delay_xus 02B3                   _Read_IRData 0118  
                 Send_Low@nus 0024                __pcstackCOMMON 0070       VS1838_Process@Address_H 0022  
     VS1838_Process@Address_L 0023           __end_of_Timer1_Init 028E           __end_of_Timer2_Init 02C4  
                  ??_ADC_Init 0026                 IR_SEND@irdata 0029            _VS838_Receive_Data 0036  
     Read_EEPROM_u8@EEAddress 0020             __end_of_Send_High 0264                    __pbssBANK0 0032  
             ??_LED_Study_End 0026                  ?_GetADCValue 0020                     ?_Send_Low 0024  
            ??_Clean_countReg 0070                    __pmaintext 01D9                 _VS1838_Status 007A  
                  __pintentry 0004                       _CCP1CON 0015                       _ADC_GET 003A  
                     _T1CKPS0 0084                       _T1CKPS1 0085                       _T2CKPS0 0090  
                     _T2CKPS1 0091                       _T1OSCEN 0083                       i1l10300 0000  
                     i1l10310 00A0                       i1l10320 0000                       i1l10312 0000  
                     i1l10304 0000                       i1l10322 0000                       i1l10314 0000  
                     i1l10306 0099                       i1l10260 0036                       i1l10252 001F  
                     i1l10244 0000                       i1l10316 0000                       i1l10270 0000  
                     i1l10254 0022                       i1l10246 000E                       i1l10318 0000  
                     i1l10326 0000                       i1l10280 005B                       i1l10266 0000  
                     i1l10274 0052                       i1l10290 0000                       i1l10282 0000  
                     i1l10276 0059                       i1l10268 004C                       i1l10292 0000  
                     i1l10284 0000                       i1l10288 0000                       i1l10298 0000  
                     _GO_DONE 00F9                       _IR_SEND 014E                       _PSTRCON 019D  
                     _TOUTPS0 0093                       _TOUTPS1 0094                       _TOUTPS2 0095  
                     _TOUTPS3 0096                       _STRSYNC 0CEC             ??_Write_EEPROM_u8 0021  
                     _Control 00AB                 ??_System_init 0020                    ??_Send_Low 0026  
                 _Timer1_Init 027A                   _Timer2_Init 02B3         __size_of_isKeyPressed 0007  
                     ___lwdiv 01AF                  __size_of_ISR 0047              ??_Read_EEPROM_u8 0020  
                   _GPIO_Init 0180          end_of_initialization 02E5                 ??_EEPROM_Init 0022  
                _isKeyPressed 0300                     _IR_DATA_t 0032       __size_of_VS1838_Process 0036  
         __end_of_System_init 0300   __end_of_VS1838ReceiveHandle 0064             __size_of_ADC_Init 0016  
                  ?_GPIO_Init 0070                  Send_High@nus 0027            GetADCValue@ADC_num 0022  
                ?_Read_IRData 0022                     _Delay_xms 0234                     _Delay_xus 02A1  
        __size_of_GetADCValue 0013           __end_of_EEPROM_Init 02F0           start_initialization 02DC  
                 __end_of_ISR 00AB                     _Send_High 024D                   _System_init 02F8  
                  ?_Delay_xms 0020                    ?_Delay_xus 0020             _VS1838_receive_ok 0040  
           __size_of_Send_Low 0006               _Write_EEPROM_u8 01FD                   __pbssCOMMON 0077  
               __pcstackBANK0 0020                      ?_IR_SEND 0029                   ??_GPIO_Init 0020  
        _VS1838_Receive_Count 0079                 ?_GetCCP1Value 0070                    ?_Send_High 0027  
                 _EEPROM_Init 02E7                      ?_Control 0070         __end_of_LED_Study_End 022A  
                ?_Timer1_Init 0070                  ?_Timer2_Init 0070              ___lwdiv@dividend 0022  
                    IR_SEND@i 002D                     __ptext530 02A1                     __ptext531 0234  
                   __ptext523 0000                     __ptext540 02B3                     __ptext532 00E2  
                   __ptext524 00AB                _VS1838_Process 00E2                     __ptext541 027A  
                   __ptext533 0118                     __ptext525 014E                     __ptext542 0180  
                   __ptext534 02E7                     __ptext526 0307                     __ptext543 02F8  
                   __ptext535 01AF                     __ptext527 021A                     __ptext544 0064  
                   __ptext536 02C4                     __ptext528 0264                     __ptext545 030D  
                   __ptext537 01FD                     __ptext529 024D                     __ptext546 02D0  
                   __ptext538 028E                     __ptext547 000D                     __ptext539 0300  
                   __ptext548 0000                     _flag_senf 0041                      ?___lwdiv 0020  
                    _ADC_Init 0264              ___lwdiv@quotient 0024                ??_GetCCP1Value 0072  
           interrupt_function 0004                     _send_flag 007B                   ??_Delay_xms 0022  
                 ??_Delay_xus 0022        __end_of_VS1838_Process 0118       __end_of_Write_EEPROM_u8 021A  
        __size_of_Read_IRData 0036                      Control@i 002E       __size_of_Clean_countReg 0003  
            __size_of_IR_SEND 0032          VS1838_Process@Data_H 0024          VS1838_Process@Data_L 0025  
                 ??_Send_High 0029                      _Send_Low 0307              __size_of_Control 0037  
             ?_VS1838_Process 0070              __size_of___lwdiv 002A      Write_EEPROM_u8@EEAddress 0021  
             ___lwdiv@divisor 0020               ___lwdiv@counter 0026      Read_EEPROM_u8@EepromData 0021  
__size_of_VS1838ReceiveHandle 0057                 __size_of_main 0024                 ??_GetADCValue 0022  
                ?_System_init 0070                      clear_ram 02F0       __size_of_Read_EEPROM_u8 000C  
        __size_of_Timer1_Init 0014          __size_of_Timer2_Init 0011              ?_Write_EEPROM_u8 0020  
        __end_of_GetCCP1Value 02DC                    Delay_xms@i 0024                    Delay_xms@x 0020  
                  Delay_xus@i 0022                    Delay_xus@x 0020                      intlevel1 0000  
                ?_EEPROM_Init 0070           __end_of_GetADCValue 02A1                _Clean_countReg 030D  
               ?_isKeyPressed 0070  
